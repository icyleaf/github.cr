{"repository_name":"gitlab","body":"# 💎 Gitlab.cr\n\n[![Language](https://img.shields.io/badge/language-crystal-776791.svg)](https://github.com/crystal-lang/crystal)\n[![Tag](https://img.shields.io/github/tag/icyleaf/gitlab.cr.svg)](https://github.com/icyleaf/gitlab.cr/blob/master/CHANGELOG.md)\n[![Build Status](https://img.shields.io/circleci/project/github/icyleaf/gitlab.cr/master.svg?style=flat)](https://circleci.com/gh/icyleaf/gitlab.cr)\n\nGitlab.cr is a [GitLab API](http://docs.gitlab.com/ce/api/README.html) wrapper writes with [Crystal](http://crystal-lang.org/) Language.\nInspired from [gitlab](https://github.com/NARKOZ/gitlab) gem for ruby version. **No support GraphQL API**\n\nBuild in crystal version >= `v0.28.0`, Docs Generated in [1081bda](https:///commit/1081bda) (2020-10-12 10:26:29 +0800).\n\n## Installation\n\n```yaml\ndependencies:\n  gitlab:\n    github: icyleaf/gitlab.cr\n```\n\n## Usage\n\n```crystal\nrequire \"gitlab\"\n\n# configuration\nendpoint = \"http://domain.com/api/v3\"\ntoken = \"<token>\"\n\n# initialize a new client\ng = Gitlab.client(endpoint, token)\n# => #<Gitlab::Client:0x101653f20 @endpoint=\"http://localhost:10080/api/v3\", @token=\"xxx\">\n\n# get the authenticated user\nuser = g.user\n# => {\"name\" => \"icyleaf\", \"username\" => \"icyleaf\", \"id\" => 34, \"state\" => \"active\", \"avatar_url\" => \"http://www.gravatar.com/avatar/38e1b2eb5d0a3fff4fb0ab8363c8f874?s=80&d=identicon\", \"web_url\" => \"http://gitlab.docker:10080/u/icyleaf\", \"created_at\" => \"2016-05-14T09:23:42.594+05:30\", \"is_admin\" => true, \"bio\" => nil, \"location\" => nil, \"skype\" => \"\", \"linkedin\" => \"\", \"twitter\" => \"\", \"website_url\" => \"\", \"last_sign_in_at\" => \"2016-05-14T09:24:00.575+05:30\", \"confirmed_at\" => \"2016-05-14T09:23:42.457+05:30\", \"email\" => \"icyleaf.cn@gmail.com\", \"theme_id\" => 2, \"color_scheme_id\" => 1, \"projects_limit\" => 8, \"current_sign_in_at\" => \"2016-06-18T20:11:15.609+05:30\", \"identities\" => [], \"can_create_group\" => true, \"can_create_project\" => true, \"two_factor_enabled\" => false, \"external\" => false, \"private_token\" => \"xxx\"}\n\n# get the user's email\nemail = user[\"email\"]\n# => \"icyleaf.cn@gmail.com\"\n\n# get list of projects\nprojects = g.projects({ \"per_page\" => 5 })\n\n# handle the exception\nbegin\n  pp g.delete_group(999)\nrescue ex\n  pp ex.message\n  # Here has one variable \"response\" instance of Gitlab::HTTP::Response\n  # Friendly for developer to debug and control expressions.\n  pp ex.response.code\n  pp ex.response.body\nend\n\n# request not handled APIs\n# example: request a GET method to call \"/application/settings\"\n\n# get gitlab settings\ng.get(\"/application/settings\")\n\n# update gitlab settings\ng.put(\"/application/settings\", { \"signup_enabled\" => \"false\" })\n```\n\nFor more information, refer to [API Documentation](http://icyleaf.github.io/gitlab.cr/).\n\n## Progress\n\n### Built-in\n\n- Http Client - [Halite](https://github.com/icyleaf/halite)\n- Exceptions\n- Gitlab wrapper\n- Authentication\n- 100% Rspec Coveraged\n\n### Gitlab\n\n#### Completed\n\n- Service Status (**Not Gitlab API**)\n  - Check service available - `available?`\n- Users\n  - List Users - `users`\n  - Single user - `user(user_id)`\n  - User creation - `create_user`\n  - User modification - `edit_user`\n  - User deletion - `delete_user`\n  - Current user - `user`\n  - User deletion - `delete_user`\n  - List custom attributes for given user - `user_custom_attributes(user_id)`\n  - Add custom attribute for given user - `user_add_custom_attribute(user_id, key)`\n  - Delete custom attribute for given user - `user_delete_custom_attribute(user_id, key)`\n  - Block user - `block_user(user_id)`\n  - Unblock user - `unblock_user(user_id)`\n  - List SSH keys - `ssh_keys`\n  - List SSH keys for user - `ssh_keys(user_id)`\n  - Single SSH key `ssh_key(ssh_key_id)`\n  - Add SSH key - `create_ssh_key`\n  - Add SSH key for user - `create_ssh_key(user_id)`\n  - Delete SSH key for current user - `delete_ssh_key`\n  - Delete SSH key for given user - `delete_ssh_key(user_id)`\n  - List emails - `emails`\n  - List emails for user - `emails(user_id)`\n  - Single email - `email`\n  - Add email - `add_email`\n  - Add email for user - `add_email(user_id)`\n  - Delete email for current user - `delete_email`\n  - Delete email for given user - `delete_email(user_id)`\n- Session\n  - Login session - `session`\n- Projects (including setting Webhooks)\n  - Uploads\n    - Upload a file - `upload_file`\n  - List projects - `projects`\n    - List owned projects - `owned_projects`\n    - List starred projects - `starred_projects`\n    - List ALL projects - `all_projects`\n    - Get single project - `project`\n    - Get project events - `project_events`\n    - Create project - `create_project`\n    - Create project for user - `create_project(user_id)`\n    - Edit project - `edit_project`\n    - Fork project - `fork_project`\n    - Star a project - `star_project`\n    - Unstar a project - `unstar_project`\n    - Archive a project - `archive_project`\n    - Unarchive a project - `unarchive_project`\n    - Remove project - `delete_project`\n  - Team members\n    - List project team members - `project_members`\n    - Get project team member - `project_member`\n    - Add project team member - `add_project_member`\n    - Edit project team member - `edit_project_member`\n    - Remove project team member - `remove_project_member`\n    - Share project with group - `share_project`\n  - Pages Domains\n    - List project pages domains - `project_pages_domains`\n    - Get project pages domain - `project_pages_domain`\n    - Add project pages domain - `add_project_pages_domain`\n    - Edit project pages domain `edit_project_pages_domain`\n    - Remove project pages domain - `remove_project_pages_domain`\n  - Hooks\n    - List project hooks - `project_hooks`\n    - Get project hook - `project_hook`\n    - Add project hook - `add_project_hook`\n    - Edit project hook - `edit_project_hook`\n    - Delete project hook - `remove_project_hook`\n  - Branches\n    - List branches - `project_branchs`\n    - List single branch - `project_branch`\n    - Protect single branch - `protect_project_branch`\n    - Unprotect single branch - `unprotect_project_branch`\n  - Admin fork relation\n    - Create a forked from/to relation between existing projects. - `create_fork_from`\n    - Delete an existing forked from relationship - `remove_fork_from`\n  - Search for projects by name - `project_search`\n- Repositories\n  - List repository tree - `tree`\n  - Raw blob content - `blow`\n  - Get an archive of the repository - `archive_project`\n  - Compare branches, tags or commits - `compare`\n  - Contributors - `contributors`\n- Repository File\n  - Gets a repository file - `get_file`\n  - Get raw file content - `file_contents`\n  - Create a file\n  - Edit a file\n  - Remove a file\n- Commits\n  - List repository commits - `commits`\n  - Get a single commit - `commit`\n  - Get the diff of a commit - `commit_diff`\n  - Get the comments of a commit - `commit_coments`\n  - Post comment to commit - `create_commit_comment`\n  - Commit status\n    - Get the status of a commit - `commit_status`\n    - Post the build status to a commit - `update_commit_status`\n- Branches\n  - List repository branches - `branches`\n  - Get single repository branch - `branch`\n  - Protect repository branch - `protect_branch`\n  - Unprotect repository branch - `unprotect_branch`\n  - Create repository branch - `create_branch`\n  - Delete repository branch - `delete_branch`\n- Merge Requests\n  - List merge requests - `merge_requests`\n  - Get single MR - `merge_request`\n  - Get single MR commits - `merge_request_commit`\n  - Get single MR changes - `merge_request_changes`\n  - Create MR - `create_merge_request`\n  - Update MR - `edit_merge_request`\n  - Delete a merge request - `delete_merge_request`\n  - Accept MR - `accept_merge_request`\n  - Cancel Merge When Build Succeeds - `cancel_merge_request_when_build_succeed`\n  - Comments on merge requests - `merge_request_comments`\n  - List issues that will close on merge -  `merge_request_closed_issues`\n  - Subscribe to a merge request - `subscribe_merge_request`\n  - Unsubscribe from a merge request - `unsubscribe_merge_request`\n- Issues\n  - List issues - `issues`\n  - List project issues - `issues(project_id)`\n  - Single issue - `issue`\n  - New issue - `create_issue`\n  - Edit issue - `edit_issue` / `close_issue` / `reopen_issue`\n  - Delete an issue - `delete_issue`\n  - Move an issue - `move_issue`\n  - Subscribe to an issue - `subscribe_issue`\n  - Unsubscribe from an issue - `unsubscribe_issue`\n  - Comments on issues - Comments are done via the **notes** resource\n- Keys\n  - Get SSH key with user by ID of an SSH key - `key`\n- Labels\n  - List labels - `labels`\n  - Create a new label - `create_label`\n  - Delete a label - `delete_label`\n  - Edit an existing label - `edit_labe`\n  - Subscribe to a label - `subscribe_label`\n  - Unsubscribe from a label - `unsubscribe_label`\n- Milestones\n  - List project milestones - `milestones`\n  - Get single milestone - `milestone`\n  - Create new milestone - `create_milestone`\n  - Edit milestone - `edit_milestone`\n  - Get all issues assigned to a single milestone - `milestone_issues`\n  - Get all merge requests of a given milestone. - `milestone_merge_requests`\n- Notes (comments)\n  - Issues\n    - List project issue notes - `issue_notes`\n    - Get single issue note - `issue_note`\n    - Create new issue note - `create_issue_note`\n    - Modify existing issue note - `edit_issue_note`\n    - Delete an issue note - `delete_issue_note`\n  - Snippets\n    - List all snippet notes - `snippet_notes`\n    - Get single snippet note - `snippet_note`\n    - Create new snippet note - `create_snippet_note`\n    - Modify existing snippet note - `edit_snippet_note`\n    - Delete a snippet note - `delete_snippet_note`\n  - Merge Requests\n    - List all merge request notes - `merge_request_notes`\n    - Get single merge request note - `merge_request_note`\n    - Create new merge request note - `create_merge_request_note`\n    - Modify existing merge request note - `edit_merge_request_note`\n    - Delete a merge request note - `delete_merge_request_note`\n- Deploy Keys\n  - List deploy keys - `deploy_keys`\n  - Single deploy key - `deploy_key`\n  - Add deploy key - `create_deploy_key`\n  - Delete deploy key - `remove_deploy_key`\n- Groups\n  - List groups - `groups`\n  - List a group's projects - `group_projects`\n  - Details of a group - `group`\n  - New group - `create_group`\n  - Transfer project to group - `transfer_project_to_group`\n  - Update group - `edit_group`\n  - Remove group - `delete_group`\n  - Search for group - `group_search`\n  - Group members\n    - List group members - `group_members`\n    - Get member detail of group - `group_member`\n    - Add group member - `add_member_to_group`\n    - Edit group team member - `edit_member_to_group`\n    - Remove user team member - `remove_member_to_group`\n  - Namespaces in groups - same as **List group**\n- Tags\n  - List project repository tags - `tags`\n  - Get a single repository tag - `tag`\n  - Create a new tag - `create_tag`\n  - Delete a tag - `delete_tag`\n  - Create a new release - `create_release_notes`\n  - Update a release - `update_release_notes`\n- Version\n  - Get Gitlab version - `version`\n\n#### Todo (optional)\n\n- Award Emoji\n- Project Snippets\n- Services\n- System Hooks\n- Settings\n- Boards\n- Gitlab CI\n  - Builds\n  - Jobs\n  - Runners\n  - Pipelines\n\n## Help and Discussion\n\nYou can browse the API documents:\n\nhttp://icyleaf.github.io/gitlab.cr/\n\nYou can browse the Changelog:\n\nhttps://github.com/icyleaf/gitlab.cr/blob/master/CHANGELOG.md\n\nIf you have found a bug, please create a issue here:\n\nhttps://github.com/icyleaf/gitlab.cr/issues/new\n\n## How to Contribute\n\nYour contributions are always welcome! Please submit a pull request or create an issue to add a new question, bug or feature to the list.\n\nAll [Contributors](https://github.com/icyleaf/gitlab.cr/graphs/contributors) are on the wall.\n\n## You may also like\n\n- [halite](https://github.com/icyleaf/halite) - HTTP Requests Client with a chainable REST API, built-in sessions and loggers.\n- [markd](https://github.com/icyleaf/markd) - Yet another markdown parser built for speed, Compliant to CommonMark specification.\n- [poncho](https://github.com/icyleaf/poncho) - A .env parser/loader improved for performance.\n- [popcorn](https://github.com/icyleaf/popcorn) - Easy and Safe casting from one type to another.\n- [fast-crystal](https://github.com/icyleaf/fast-crystal) - 💨 Writing Fast Crystal 😍 -- Collect Common Crystal idioms.\n\n## License\n\n[MIT License](https://github.com/icyleaf/gitlab.cr/blob/master/LICENSE) © icyleaf\n","program":{"html_id":"gitlab/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"gitlab/Gitlab","path":"Gitlab.html","kind":"module","full_name":"Gitlab","name":"Gitlab","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.5.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"client(endpoint:String,token:String):Client-class-method","html_id":"client(endpoint:String,token:String):Client-class-method","name":"client","doc":"Alias for Gitlab::Client.new","summary":"<p>Alias for Gitlab::Client.new</p>","abstract":false,"args":[{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"String"},{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"String"}],"args_string":"(endpoint : String, token : String) : Client","source_link":null,"def":{"name":"client","args":[{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"String"},{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Client","visibility":"Public","body":"Client.new(endpoint, token)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"gitlab/Gitlab/Client","path":"Gitlab/Client.html","kind":"class","full_name":"Gitlab::Client","name":"Client","abstract":false,"superclass":{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"gitlab/Gitlab/Client/Version","kind":"module","full_name":"Gitlab::Client::Version","name":"Version"},{"html_id":"gitlab/Gitlab/Client/Key","kind":"module","full_name":"Gitlab::Client::Key","name":"Key"},{"html_id":"gitlab/Gitlab/Client/DeployKey","kind":"module","full_name":"Gitlab::Client::DeployKey","name":"DeployKey"},{"html_id":"gitlab/Gitlab/Client/Milestone","kind":"module","full_name":"Gitlab::Client::Milestone","name":"Milestone"},{"html_id":"gitlab/Gitlab/Client/MergeRequest","kind":"module","full_name":"Gitlab::Client::MergeRequest","name":"MergeRequest"},{"html_id":"gitlab/Gitlab/Client/Label","kind":"module","full_name":"Gitlab::Client::Label","name":"Label"},{"html_id":"gitlab/Gitlab/Client/Issue","kind":"module","full_name":"Gitlab::Client::Issue","name":"Issue"},{"html_id":"gitlab/Gitlab/Client/Note","kind":"module","full_name":"Gitlab::Client::Note","name":"Note"},{"html_id":"gitlab/Gitlab/Client/Commit","kind":"module","full_name":"Gitlab::Client::Commit","name":"Commit"},{"html_id":"gitlab/Gitlab/Client/Tag","kind":"module","full_name":"Gitlab::Client::Tag","name":"Tag"},{"html_id":"gitlab/Gitlab/Client/Branch","kind":"module","full_name":"Gitlab::Client::Branch","name":"Branch"},{"html_id":"gitlab/Gitlab/Client/RepositoryFile","kind":"module","full_name":"Gitlab::Client::RepositoryFile","name":"RepositoryFile"},{"html_id":"gitlab/Gitlab/Client/Repository","kind":"module","full_name":"Gitlab::Client::Repository","name":"Repository"},{"html_id":"gitlab/Gitlab/Client/Project","kind":"module","full_name":"Gitlab::Client::Project","name":"Project"},{"html_id":"gitlab/Gitlab/Client/Group","kind":"module","full_name":"Gitlab::Client::Group","name":"Group"},{"html_id":"gitlab/Gitlab/Client/Session","kind":"module","full_name":"Gitlab::Client::Session","name":"Session"},{"html_id":"gitlab/Gitlab/Client/User","kind":"module","full_name":"Gitlab::Client::User","name":"User"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"gitlab/Gitlab/Client/Branch","kind":"module","full_name":"Gitlab::Client::Branch","name":"Branch"},{"html_id":"gitlab/Gitlab/Client/Commit","kind":"module","full_name":"Gitlab::Client::Commit","name":"Commit"},{"html_id":"gitlab/Gitlab/Client/DeployKey","kind":"module","full_name":"Gitlab::Client::DeployKey","name":"DeployKey"},{"html_id":"gitlab/Gitlab/Client/Group","kind":"module","full_name":"Gitlab::Client::Group","name":"Group"},{"html_id":"gitlab/Gitlab/Client/Issue","kind":"module","full_name":"Gitlab::Client::Issue","name":"Issue"},{"html_id":"gitlab/Gitlab/Client/Key","kind":"module","full_name":"Gitlab::Client::Key","name":"Key"},{"html_id":"gitlab/Gitlab/Client/Label","kind":"module","full_name":"Gitlab::Client::Label","name":"Label"},{"html_id":"gitlab/Gitlab/Client/MergeRequest","kind":"module","full_name":"Gitlab::Client::MergeRequest","name":"MergeRequest"},{"html_id":"gitlab/Gitlab/Client/Milestone","kind":"module","full_name":"Gitlab::Client::Milestone","name":"Milestone"},{"html_id":"gitlab/Gitlab/Client/Note","kind":"module","full_name":"Gitlab::Client::Note","name":"Note"},{"html_id":"gitlab/Gitlab/Client/Project","kind":"module","full_name":"Gitlab::Client::Project","name":"Project"},{"html_id":"gitlab/Gitlab/Client/Repository","kind":"module","full_name":"Gitlab::Client::Repository","name":"Repository"},{"html_id":"gitlab/Gitlab/Client/RepositoryFile","kind":"module","full_name":"Gitlab::Client::RepositoryFile","name":"RepositoryFile"},{"html_id":"gitlab/Gitlab/Client/Session","kind":"module","full_name":"Gitlab::Client::Session","name":"Session"},{"html_id":"gitlab/Gitlab/Client/Tag","kind":"module","full_name":"Gitlab::Client::Tag","name":"Tag"},{"html_id":"gitlab/Gitlab/Client/User","kind":"module","full_name":"Gitlab::Client::User","name":"User"},{"html_id":"gitlab/Gitlab/Client/Version","kind":"module","full_name":"Gitlab::Client::Version","name":"Version"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab","kind":"module","full_name":"Gitlab","name":"Gitlab"},"doc":"Gitlab API Client wrapper\n\nSee the [Gitlab Offical API Document](http://docs.gitlab.com/ce/api/README.html) for more details.","summary":"<p>Gitlab API Client wrapper</p>","class_methods":[],"constructors":[{"id":"new(endpoint:String,token:String)-class-method","html_id":"new(endpoint:String,token:String)-class-method","name":"new","doc":"Create a new client\n\n```\nGitlab::Client.new(\"<endpoint>\", \"<token\")\n```","summary":"<p>Create a new client</p>","abstract":false,"args":[{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"String"},{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"String"}],"args_string":"(endpoint : String, token : String)","source_link":null,"def":{"name":"new","args":[{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"String"},{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(endpoint, token)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"available?-instance-method","html_id":"available?-instance-method","name":"available?","doc":"Return a `Bool` status by gitlab api service\n\n- Return `Bool`\n\n```\nclient.available?  # => true\n```","summary":"<p>Return a <code>Bool</code> status by gitlab api service</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"available?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  get(\"user\")\n  true\nrescue Halite::Exception::ConnectionError\n  false\nend"}},{"id":"delete(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil,form:Hash(String,_)|NamedTuple?=nil,json:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","html_id":"delete(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil,form:Hash(String,_)|NamedTuple?=nil,json:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","name":"delete","doc":"Return a `Halite::Response` by sending a DELETE http request\n\n```\nclient.delete(\"path\", form: {\n  first_name: \"foo\",\n  last_name:  \"bar\"\n})\n```","summary":"<p>Return a <code>Halite::Response</code> by sending a DELETE http request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"json","doc":null,"default_value":"nil","external_name":"json","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"args_string":"(path : String, headers : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, params : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, form : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, json : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>) : Halite::Response","source_link":null,"def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"json","doc":null,"default_value":"nil","external_name":"json","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Halite::Response","visibility":"Public","body":"response = @connection.delete(path, headers: headers, params: params, form: form, json: nil)\nvalidate(response)\nresponse\n"}},{"id":"endpoint:String-instance-method","html_id":"endpoint:String-instance-method","name":"endpoint","doc":"The endpoint of Gitlab","summary":"<p>The endpoint of Gitlab</p>","abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"endpoint","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@endpoint"}},{"id":"endpoint=(endpoint:String)-instance-method","html_id":"endpoint=(endpoint:String)-instance-method","name":"endpoint=","doc":"Setter for endpoint","summary":"<p>Setter for endpoint</p>","abstract":false,"args":[{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"String"}],"args_string":"(endpoint : String)","source_link":null,"def":{"name":"endpoint=","args":[{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@endpoint = endpoint\n@connection.endpoint = @endpoint\n"}},{"id":"get(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","html_id":"get(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","name":"get","doc":"Return a Halite::Response by sending a GET method http request\n\n```\nclient.get(\"path\", params: {\n  first_name: \"foo\",\n  last_name:  \"bar\"\n})\n```","summary":"<p>Return a Halite::Response by sending a GET method http request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"args_string":"(path : String, headers : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, params : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>) : Halite::Response","source_link":null,"def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Halite::Response","visibility":"Public","body":"response = @connection.get(path, headers: headers, params: params)\nvalidate(response)\nresponse\n"}},{"id":"head(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","html_id":"head(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","name":"head","doc":"Return a Halite::Response by sending a HEAD method http request\n\n```\nclient.head(\"path\", params: {\n  first_name: \"foo\",\n  last_name:  \"bar\"\n})\n```","summary":"<p>Return a Halite::Response by sending a HEAD method http request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"args_string":"(path : String, headers : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, params : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>) : Halite::Response","source_link":null,"def":{"name":"head","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Halite::Response","visibility":"Public","body":"response = @connection.head(path, headers: headers, params: params)\nvalidate(response)\nresponse\n"}},{"id":"patch(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil,form:Hash(String,_)|NamedTuple?=nil,json:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","html_id":"patch(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil,form:Hash(String,_)|NamedTuple?=nil,json:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","name":"patch","doc":"Return a `Halite::Response` by sending a PATCH http request\n\n```\nclient.patch(\"path\", form: {\n  first_name: \"foo\",\n  last_name:  \"bar\"\n})\n```","summary":"<p>Return a <code>Halite::Response</code> by sending a PATCH http request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"json","doc":null,"default_value":"nil","external_name":"json","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"args_string":"(path : String, headers : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, params : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, form : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, json : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>) : Halite::Response","source_link":null,"def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"json","doc":null,"default_value":"nil","external_name":"json","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Halite::Response","visibility":"Public","body":"response = @connection.patch(path, headers: headers, params: params, form: form, json: nil)\nvalidate(response)\nresponse\n"}},{"id":"post(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil,form:Hash(String,_)|NamedTuple?=nil,json:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","html_id":"post(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil,form:Hash(String,_)|NamedTuple?=nil,json:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","name":"post","doc":"Return a `Halite::Response` by sending a POST http request\n\n```\nclient.post(\"path\", form: {\n  first_name: \"foo\",\n  last_name:  \"bar\"\n})\n```","summary":"<p>Return a <code>Halite::Response</code> by sending a POST http request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"json","doc":null,"default_value":"nil","external_name":"json","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"args_string":"(path : String, headers : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, params : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, form : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, json : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>) : Halite::Response","source_link":null,"def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"json","doc":null,"default_value":"nil","external_name":"json","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Halite::Response","visibility":"Public","body":"response = @connection.post(path, headers: headers, params: params, form: form, json: nil)\nvalidate(response)\nresponse\n"}},{"id":"put(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil,form:Hash(String,_)|NamedTuple?=nil,json:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","html_id":"put(path:String,headers:Hash(String,_)|NamedTuple?=nil,params:Hash(String,_)|NamedTuple?=nil,form:Hash(String,_)|NamedTuple?=nil,json:Hash(String,_)|NamedTuple?=nil):Halite::Response-instance-method","name":"put","doc":"Return a `Halite::Response` by sending a PUT http request\n\n```\nclient.put(\"path\", form: {\n  first_name: \"foo\",\n  last_name:  \"bar\"\n})\n```","summary":"<p>Return a <code>Halite::Response</code> by sending a PUT http request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"json","doc":null,"default_value":"nil","external_name":"json","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"args_string":"(path : String, headers : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, params : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, form : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>, json : Hash(String, _) | NamedTuple? = <span class=\"n\">nil</span>) : Halite::Response","source_link":null,"def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash(String, _) | NamedTuple | ::Nil"},{"name":"json","doc":null,"default_value":"nil","external_name":"json","restriction":"Hash(String, _) | NamedTuple | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Halite::Response","visibility":"Public","body":"response = @connection.put(path, headers: headers, params: params, form: form, json: nil)\nvalidate(response)\nresponse\n"}},{"id":"token:String-instance-method","html_id":"token:String-instance-method","name":"token","doc":"The token(private-token or OAuth2 access token) of Gitlab","summary":"<p>The token(private-token or OAuth2 access token) of Gitlab</p>","abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@token"}},{"id":"token=(token:String)-instance-method","html_id":"token=(token:String)-instance-method","name":"token=","doc":"The token(private-token or OAuth2 access token) of Gitlab","summary":"<p>The token(private-token or OAuth2 access token) of Gitlab</p>","abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"String"}],"args_string":"(token : String)","source_link":null,"def":{"name":"token=","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token = token"}}],"macros":[],"types":[{"html_id":"gitlab/Gitlab/Client/Branch","path":"Gitlab/Client/Branch.html","kind":"module","full_name":"Gitlab::Client::Branch","name":"Branch","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to branch.\n\nSee [http://docs.gitlab.com/ce/api/branches.html](http://docs.gitlab.com/ce/api/branches.html)","summary":"<p>Defines methods related to branch.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"branch(project_id:Int32,branch:String):JSON::Any-instance-method","html_id":"branch(project_id:Int32,branch:String):JSON::Any-instance-method","name":"branch","doc":"Get single branch in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] branch The name of a branch.\n- return [JSON::Any] Information about the branch in a project.\n\n```\nclient.branch(1, \"master\")\n```","summary":"<p>Get single branch in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"args_string":"(project_id : Int32, branch : String) : JSON::Any","source_link":null,"def":{"name":"branch","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/branches/#{branch}\")).parse"}},{"id":"branches(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"branches(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"branches","doc":"Gets a list of branches in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of branches under a project.\n\n```\nclient.branches(1)\nclient.branches(1, {\"per_page\" => \"10\"})\n```","summary":"<p>Gets a list of branches in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"branches","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/branches\", params: params)).parse"}},{"id":"create_branch(project_id:Int32,branch:String,ref:String):JSON::Any-instance-method","html_id":"create_branch(project_id:Int32,branch:String,ref:String):JSON::Any-instance-method","name":"create_branch","doc":"Create branch in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] branch The name of a branch.\n- param  [String] ref The branch name or commit SHA to create branch from.\n- return [JSON::Any] Information about the created branch in a project.\n\n```\nclient.create_branch(1, \"develop\", \"master\")\nclient.create_branch(1, \"hotfix/xxx\", \"9dff773\")\n```","summary":"<p>Create branch in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"},{"name":"ref","doc":null,"default_value":"","external_name":"ref","restriction":"String"}],"args_string":"(project_id : Int32, branch : String, ref : String) : JSON::Any","source_link":null,"def":{"name":"create_branch","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"},{"name":"ref","doc":null,"default_value":"","external_name":"ref","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/repository/branches\", form: {\"branch_name\" => branch, \"ref\" => ref})).parse"}},{"id":"delete_branch(project_id:Int32,branch:String):JSON::Any-instance-method","html_id":"delete_branch(project_id:Int32,branch:String):JSON::Any-instance-method","name":"delete_branch","doc":"Delete a branch.\n\n- param  [Int32] project_id The ID of a project\n- param  [String] branch The name of a branch.\n- return [JSON::Any] Information about the deleted branch.\n\n```\nclient.delete_branch(4, 2)\n```","summary":"<p>Delete a branch.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"args_string":"(project_id : Int32, branch : String) : JSON::Any","source_link":null,"def":{"name":"delete_branch","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project_id}/repository/branches/#{branch}\")).parse"}},{"id":"protect_branch(project_id:Int32,branch:String,form:Hash?=nil):JSON::Any-instance-method","html_id":"protect_branch(project_id:Int32,branch:String,form:Hash?=nil):JSON::Any-instance-method","name":"protect_branch","doc":"Protect branch in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] branch The name of a branch.\n- param  [String] ref The branch name or commit SHA to create branch from.\n- return [JSON::Any] Information about protected branch in a project\n\n```\nclient.branch(1, \"master\")\nclient.protect_branch(5, 'api', { \"developers_can_push\" => \"true\" })\n```","summary":"<p>Protect branch in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, branch : String, form : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"protect_branch","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/repository/branches/#{branch}/protect\", form: form)).parse"}},{"id":"unprotect_branch(project_id:Int32,branch:String):JSON::Any-instance-method","html_id":"unprotect_branch(project_id:Int32,branch:String):JSON::Any-instance-method","name":"unprotect_branch","doc":"Unprotect branch in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] branch The name of a branch.\n- return [JSON::Any] Information about unprotected branch in a project\n\n```\nclient.branch(1, \"master\")\n```","summary":"<p>Unprotect branch in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"args_string":"(project_id : Int32, branch : String) : JSON::Any","source_link":null,"def":{"name":"unprotect_branch","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/repository/branches/#{branch}/unprotect\")).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Commit","path":"Gitlab/Client/Commit.html","kind":"module","full_name":"Gitlab::Client::Commit","name":"Commit","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to branch.\n\nSee [http://docs.gitlab.com/ce/api/commits.html](http://docs.gitlab.com/ce/api/commits.html)","summary":"<p>Defines methods related to branch.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"commit(project_id:Int32,commit:String):JSON::Any-instance-method","html_id":"commit(project_id:Int32,commit:String):JSON::Any-instance-method","name":"commit","doc":"Get single commit in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] commit The ID of a commit.\n- return [JSON::Any] Information about the commit.\n\n```\nclient.commit(1, 10)\n```","summary":"<p>Get single commit in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"commit","doc":null,"default_value":"","external_name":"commit","restriction":"String"}],"args_string":"(project_id : Int32, commit : String) : JSON::Any","source_link":null,"def":{"name":"commit","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"commit","doc":null,"default_value":"","external_name":"commit","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/commits/#{commit}\")).parse"}},{"id":"commit_comments(project_id:Int32,sha:String,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"commit_comments(project_id:Int32,sha:String,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"commit_comments","doc":"Get the comments of a commit in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] sha The name of a repository branch or tag or if not given the default branch.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20.\n- return [JSON::Any] List of comments in a commit.\n\n```\nclient.commit_comments(1, \"daff23c\")\n```","summary":"<p>Get the comments of a commit in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"","external_name":"sha","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project_id : Int32, sha : String, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"commit_comments","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"","external_name":"sha","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/commits/#{sha}/comments\", params: params)).parse"}},{"id":"commit_diff(project_id:Int32,sha:String):JSON::Any-instance-method","html_id":"commit_diff(project_id:Int32,sha:String):JSON::Any-instance-method","name":"commit_diff","doc":"Get the diff of a commit in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] sha The name of a repository branch or tag or if not given the default branch.\n- return [JSON::Any] Information about the commit diff.\n\n```\nclient.commit_diff(1, \"daff23c\")\n```","summary":"<p>Get the diff of a commit in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"","external_name":"sha","restriction":"String"}],"args_string":"(project_id : Int32, sha : String) : JSON::Any","source_link":null,"def":{"name":"commit_diff","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"","external_name":"sha","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/commits/#{sha}/diff\")).parse"}},{"id":"commit_status(project_id:Int32,sha:String,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"commit_status(project_id:Int32,sha:String,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"commit_status","doc":"Get the statuses of a commit in a project.\n\nSince GitLab 8.1, this is the new commit status API.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] sha The commit hash.\n- param  [Hash] params A customizable set of params.\n- option params [String] :ref Filter by ref name, it can be branch or tag.\n- option params [String] :stage Filter by stage.\n- option params [String] :name Filer by status name, eg. jenkins.\n- option params [String] :all The flag to return all statuses, not only latest ones.\n\n```\nclient.commit_status(42, \"6104942438c14ec7bd21c6cd5bd995272b3faff6\")\nclient.commit_status(42, \"6104942438c14ec7bd21c6cd5bd995272b3faff6\", {\"name\" => \"jenkins\"})\nclient.commit_status(42, \"6104942438c14ec7bd21c6cd5bd995272b3faff6\", {\"name\" => \"jenkins\", \"all\" => \"true\"})\n```","summary":"<p>Get the statuses of a commit in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"","external_name":"sha","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project_id : Int32, sha : String, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"commit_status","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"","external_name":"sha","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/commits/#{sha}/statuses\", params: params)).parse"}},{"id":"commits(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"commits(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"commits","doc":"Gets a list of commits in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Hash] params A customizable set of params.\n- option params [String] :ref_name The name of a repository branch or tag or if not given the default branch.\n- option params [String] :since Only commits after or in this date will be returned in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.\n- option params [String] :until Only commits before or in this date will be returned in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of commits.\n\n```\nclient.commits(1)\nclient.commits(1, {\"per_page\" => \"10\"})\n```","summary":"<p>Gets a list of commits in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"commits","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/commits\", params: params)).parse"}},{"id":"create_commit_comment(project_id:Int32,sha:String,note:String,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"create_commit_comment(project_id:Int32,sha:String,note:String,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"create_commit_comment","doc":"Create comment of commit in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] sha The commit SHA or name of a repository branch or tag.\n- param  [String] note The text of the comment.\n- param  [Hash] params A customizable set of params.\n- option params [String] :path The file path relative to the repository.\n- option params [String] :line The line number where the comment should be placed.\n- option params [String] :line_type The line type. Takes new or old as arguments.\n- return [JSON::Any] Information about the created commet of commit in a project.\n\n```\nclient.create_commit_comment(1, \"daff23c\", \"awesome!\")\nclient.create_commit_comment(1, \"daff23c\", \"+1\", {\"line\" => \"29\"})\n```","summary":"<p>Create comment of commit in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"","external_name":"sha","restriction":"String"},{"name":"note","doc":null,"default_value":"","external_name":"note","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project_id : Int32, sha : String, note : String, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"create_commit_comment","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"","external_name":"sha","restriction":"String"},{"name":"note","doc":null,"default_value":"","external_name":"note","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/repository/commits/#{sha}/comments\", form: {\"note\" => note}.merge(params))).parse"}},{"id":"update_commit_status(project_id:Int32,sha:String,state:String,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"update_commit_status(project_id:Int32,sha:String,state:String,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"update_commit_status","doc":"Adds or updates a status of a commit.\n\nSince GitLab 8.1, this is the new commit status API.\n\n- param  [Integer] project_id The ID of a project.\n- param  [String] sha The commit hash.\n- param  [String] state of the status. Can be: pending, running, success, failed, canceled.\n- param  [Hash] params A customizable set of params.\n- option params [String] :ref The ref (branch or tag) to which the status refers.\n- option params [String] :name Filer by status name, eg. jenkins.\n- option params [String] :target_url The target URL to associate with this status.\n- option params [String] :description The short description of the status.\n\n```\nclient.update_commit_status(42, \"6104942438c14ec7bd21c6cd5bd995272b3faff6\", \"success\")\nclient.update_commit_status(42, \"6104942438c14ec7bd21c6cd5bd995272b3faff6\", \"failed\", {\"name\" => \"jenkins\"})\nclient.update_commit_status(42, \"6104942438c14ec7bd21c6cd5bd995272b3faff6\", \"canceled\", {\"name\" => \"jenkins\", \"target_url\": \"http://example.com/builds/1\"})\n```","summary":"<p>Adds or updates a status of a commit.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"","external_name":"sha","restriction":"String"},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project_id : Int32, sha : String, state : String, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"update_commit_status","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"","external_name":"sha","restriction":"String"},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/statuses/#{sha}\", form: {\"state\" => state}.merge(params))).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/DeployKey","path":"Gitlab/Client/DeployKey.html","kind":"module","full_name":"Gitlab::Client::DeployKey","name":"DeployKey","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to deploy key.\n\nSee [http://docs.gitlab.com/ce/api/deploy_keys.html](http://docs.gitlab.com/ce/api/deploy_keys.html)","summary":"<p>Defines methods related to deploy key.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"create_deploy_key(project_id:Int32,title:String,key:String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"create_deploy_key(project_id:Int32,title:String,key:String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"create_deploy_key","doc":"Create a deploy key in a project.\n\nIf the deploy key already exists in another project, it will be joined\nto current project only if original one was is accessible by the same user.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] title The title of new deploy key.\n- param  [String] key New deploy key.\n- return [JSON::Any] Information about the created deploy key in a project.\n\n```\nclient.create_deploy_key(1, \"deploy server\", \"ssh-rsa xxx\")\n```","summary":"<p>Create a deploy key in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project_id : Int32, title : String, key : String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"create_deploy_key","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/deploy_keys\", form: {\"title\" => title, \"key\" => key}.merge(form))).parse"}},{"id":"deploy_key(project_id:Int32,key_id:Int32):JSON::Any-instance-method","html_id":"deploy_key(project_id:Int32,key_id:Int32):JSON::Any-instance-method","name":"deploy_key","doc":"Get a deploy key in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] key_id The ID of a deploy key.\n- return [JSON::Any] Information about the deploy key in a project.\n\n```\nclient.deploy_key(1, 1)\n```","summary":"<p>Get a deploy key in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"key_id","doc":null,"default_value":"","external_name":"key_id","restriction":"Int32"}],"args_string":"(project_id : Int32, key_id : Int32) : JSON::Any","source_link":null,"def":{"name":"deploy_key","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"key_id","doc":null,"default_value":"","external_name":"key_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/deploy_keys/#{key_id}\")).parse"}},{"id":"deploy_keys(project_id:Int32,params:Hash?=nil)-instance-method","html_id":"deploy_keys(project_id:Int32,params:Hash?=nil)-instance-method","name":"deploy_keys","doc":"Gets a list deploy keys in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of issues under a project.\n\n```\nclient.deploy_keys(1)\nclient.deploy_keys(1, {\"per_page\" => \"10\"})\n```","summary":"<p>Gets a list deploy keys in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, params : Hash? = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"deploy_keys","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(get(\"projects/#{project_id}/deploy_keys\", params: params)).parse"}},{"id":"disable_deploy_key(project_id:Int32,key_id:Int32):JSON::Any-instance-method","html_id":"disable_deploy_key(project_id:Int32,key_id:Int32):JSON::Any-instance-method","name":"disable_deploy_key","doc":"Disables a deploy key at the project.\n\n- param  [Integer, String] project The ID or path of a project.\n- param  [Integer] key The ID of a deploy key.\n- return [JSON::Any] Information about the enabled deploy key.\n\n```\nclient.disable_deploy_key(42, 66)\n```","summary":"<p>Disables a deploy key at the project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"key_id","doc":null,"default_value":"","external_name":"key_id","restriction":"Int32"}],"args_string":"(project_id : Int32, key_id : Int32) : JSON::Any","source_link":null,"def":{"name":"disable_deploy_key","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"key_id","doc":null,"default_value":"","external_name":"key_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/deploy_keys/#{key_id}/disable\")).parse"}},{"id":"enable_deploy_key(project_id:Int32,key_id:Int32):JSON::Any-instance-method","html_id":"enable_deploy_key(project_id:Int32,key_id:Int32):JSON::Any-instance-method","name":"enable_deploy_key","doc":"Enables a deploy key at the project.\n\n- param  [Integer, String] project The ID or path of a project.\n- param  [Integer] key The ID of a deploy key.\n- return [JSON::Any] Information about the enabled deploy key.\n\n```\nclient.enable_deploy_key(42, 66)\n```","summary":"<p>Enables a deploy key at the project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"key_id","doc":null,"default_value":"","external_name":"key_id","restriction":"Int32"}],"args_string":"(project_id : Int32, key_id : Int32) : JSON::Any","source_link":null,"def":{"name":"enable_deploy_key","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"key_id","doc":null,"default_value":"","external_name":"key_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/deploy_keys/#{key_id}/enable\")).parse"}},{"id":"remove_deploy_key(project_id:Int32,key_id:Int32):JSON::Any-instance-method","html_id":"remove_deploy_key(project_id:Int32,key_id:Int32):JSON::Any-instance-method","name":"remove_deploy_key","doc":"Delete a deploy key in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] key_id The name of a deploy key.\n- return [JSON::Any] Information about the deleted deploy key.\n\n```\nclient.remove_deploy_key(4, 3)\n```","summary":"<p>Delete a deploy key in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"key_id","doc":null,"default_value":"","external_name":"key_id","restriction":"Int32"}],"args_string":"(project_id : Int32, key_id : Int32) : JSON::Any","source_link":null,"def":{"name":"remove_deploy_key","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"key_id","doc":null,"default_value":"","external_name":"key_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project_id}/deploy_keys/#{key_id}\")).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Group","path":"Gitlab/Client/Group.html","kind":"module","full_name":"Gitlab::Client::Group","name":"Group","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to group.\n\nSee [http://docs.gitlab.com/ce/api/groups.html](http://docs.gitlab.com/ce/api/groups.html)","summary":"<p>Defines methods related to group.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"add_group_member(group_id:Int32,user_id:Int32,access_level):JSON::Any-instance-method","html_id":"add_group_member(group_id:Int32,user_id:Int32,access_level):JSON::Any-instance-method","name":"add_group_member","doc":"Adds a user to group.\n\n- param  [Int32] group_id The group id to add a member to.\n- param  [Int32] user_id The user id of the user to add to the team.\n- param  [Int32] access_level Project access level.\n- return [JSON::Any] Information about added group member.\n\n```\nclient.add_group_member(1, 2, 40)\n```","summary":"<p>Adds a user to group.</p>","abstract":false,"args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"access_level","doc":null,"default_value":"","external_name":"access_level","restriction":""}],"args_string":"(group_id : Int32, user_id : Int32, access_level) : JSON::Any","source_link":null,"def":{"name":"add_group_member","args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"access_level","doc":null,"default_value":"","external_name":"access_level","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"groups/#{group_id}/members\", form: {\"user_id\" => user_id.to_s, \"access_level\" => access_level})).parse"}},{"id":"create_group(name:String,path:String,form:Hash?=nil):JSON::Any-instance-method","html_id":"create_group(name:String,path:String,form:Hash?=nil):JSON::Any-instance-method","name":"create_group","doc":"Creates a new group.\n\n- param [String] name The name of a group.\n- param [String] path The path of a group.\n- param [Hash] form A customizable set of form.\n- option form [String] :description The group\"s description.\n- option form [String] : visibility_level The group\"s visibility. 0 for private, 10 for internal, 20 for public.\n- return [JSON::Any] Information about created group.\n\n```\nclient.create_group(\"new-group\", \"group-path\")\nclient.create_group(\"gitlab\", \"gitlab-path\", {\"description\" => \"New Gitlab project\"})\nclient.create_group(\"gitlab\", \"gitlab-path\", {\"visibility_level\" => \"0\"})\n```","summary":"<p>Creates a new group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash | ::Nil"}],"args_string":"(name : String, path : String, form : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"create_group","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"default_form = {\"name\" => name, \"path\" => path}\nform = form ? form.merge(default_form) : default_form\n(post(\"groups\", form: form)).parse\n"}},{"id":"delete_group(group_id:Int32):JSON::Any-instance-method","html_id":"delete_group(group_id:Int32):JSON::Any-instance-method","name":"delete_group","doc":"Delete a group.\n\n- param  [Int32] group_id The ID of a group\n- return [JSON::Any] Information about the deleted group.\n\n```\nclient.delete_group(42)\n```","summary":"<p>Delete a group.</p>","abstract":false,"args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"}],"args_string":"(group_id : Int32) : JSON::Any","source_link":null,"def":{"name":"delete_group","args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"groups/#{group_id}\")).parse"}},{"id":"edit_group(group_id:Int32,form:Hash?=nil):JSON::Any-instance-method","html_id":"edit_group(group_id:Int32,form:Hash?=nil):JSON::Any-instance-method","name":"edit_group","doc":"Creates a new group.\n\nNotes: Not all gitlab version has this api.\n\n- param [Int32] group_id The ID of a group.\n- param [Hash] form A customizable set of form.\n- option form [String] :description The group\"s description.\n- option form [String] :visibility_level The group\"s visibility. 0 for private, 10 for internal, 20 for public.\n- return [JSON::Any] Information about created group.\n\n```\nclient.create_group(3, {\"name\" => \"group-path\"})\nclient.create_group(3, {\"description\" => \"New Gitlab project\"})\nclient.create_group(3, {\"visibility_level\" => \"0\"})\n```","summary":"<p>Creates a new group.</p>","abstract":false,"args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash | ::Nil"}],"args_string":"(group_id : Int32, form : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"edit_group","args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"groups/#{group_id}\", form: form)).parse"}},{"id":"edit_group_member(group_id:Int32,user_id:Int32,access_level):JSON::Any-instance-method","html_id":"edit_group_member(group_id:Int32,user_id:Int32,access_level):JSON::Any-instance-method","name":"edit_group_member","doc":"Edit a user of a group.\n\n- param  [Int32] group_id The group id to add a member to.\n- param  [Int32] user_id The user id of the user to add to the team.\n- param  [Int32] access_level Project access level.\n- return [JSON::Any] Information about added group member.\n\n```\nclient.edit_group_member(1, 2, 40)\n```","summary":"<p>Edit a user of a group.</p>","abstract":false,"args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"access_level","doc":null,"default_value":"","external_name":"access_level","restriction":""}],"args_string":"(group_id : Int32, user_id : Int32, access_level) : JSON::Any","source_link":null,"def":{"name":"edit_group_member","args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"access_level","doc":null,"default_value":"","external_name":"access_level","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"groups/#{group_id}/members/#{user_id}\", form: {\"user_id\" => user_id.to_s, \"access_level\" => access_level})).parse"}},{"id":"group(group:Int32|String):JSON::Any-instance-method","html_id":"group(group:Int32|String):JSON::Any-instance-method","name":"group","doc":"Gets details of a group.\n\n- param  [Int32|String] id The ID of a group.\n- return [JSON::Any] Information about group.\n\n```\nclient.group(42)\nclient.group(\"orgination\")\n```","summary":"<p>Gets details of a group.</p>","abstract":false,"args":[{"name":"group","doc":null,"default_value":"","external_name":"group","restriction":"Int32 | String"}],"args_string":"(group : Int32 | String) : JSON::Any","source_link":null,"def":{"name":"group","args":[{"name":"group","doc":null,"default_value":"","external_name":"group","restriction":"Int32 | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"groups/#{group}\")).parse"}},{"id":"group_member(group_id:Int32,user_id:Int32):JSON::Any-instance-method","html_id":"group_member(group_id:Int32,user_id:Int32):JSON::Any-instance-method","name":"group_member","doc":"Get details of a single group member.\n\n- param  [Integer] group_id The ID of the group to find a member in.\n- param  [Integer] user_id The user id of the member to find.\n\n```\nclient.group_member(1, 10)\n```","summary":"<p>Get details of a single group member.</p>","abstract":false,"args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(group_id : Int32, user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"group_member","args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"groups/#{group_id}/members/#{user_id}\")).parse"}},{"id":"group_members(group_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"group_members(group_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"group_members","doc":"Get a list of group members.\n\n- param  [Int32] group_id The ID of a group.\n- param  [Hash] params A customizable set of params.\n- option params [Int32] :page The page number.\n- option params [Int32] :per_page The number of results per page.\n- return [JSON::Any] List of group members under a group\n\n```\nclient.group_members(1)\nclient.group_members(1, {\"per_page\" => \"50\"})\n```","summary":"<p>Get a list of group members.</p>","abstract":false,"args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(group_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"group_members","args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"groups/#{group_id}/members\", params: params)).parse"}},{"id":"group_projects(group_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"group_projects(group_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"group_projects","doc":"Get a list of projects under a group\n\nNotes: Not all gitlab version has this api.\n\n- param [Int32] id The ID of a group\n- params [Hash] params A customizable set of params.\n- option params [String] :archived if passed, limit by archived status.\n- option params [String] :visibility if passed, limit by visibility public, internal, private.\n- option params [String] :order_by Return requests ordered by id, name, path, created_at, updated_at or last_activity_at fields. Default is created_at.\n- option params [String] :sort Return requests sorted in asc or desc order. Default is desc.\n- option params [String] :search Return list of authorized projects according to a search criteria.\n- option params [String] :ci_enabled_first Return projects ordered by ci_enabled flag. Projects with enabled GitLab CI go first.\n- return [JSON::Any] List of projects under a group\n\n```\nclient.group_projects(1)\nclient.group_projects(1, { \"archived\" => \"true\")\nclient.group_projects(1, { \"order_by\" => \"last_activity_at\", \"sort\" => \"desc\"})\n```","summary":"<p>Get a list of projects under a group</p>","abstract":false,"args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(group_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"group_projects","args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"groups/#{group_id}/projects\", params: params)).parse"}},{"id":"group_search(query,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"group_search(query,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"group_search","doc":"Search for groups by name\n\n- param  [String] query A string to search for in group names and paths.\n- param  [Hash] params A customizable set of params.\n- option params [String] :per_page Number of projects to return per page\n- option params [String] :page The page to retrieve\n- return [JSON::Any] List of projects under search qyery\n\n```\nclient.group_search(\"gitlab\")\nclient.group_search(\"gitlab\", {\"per_page\" => 50})\n```","summary":"<p>Search for groups by name</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(query, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"group_search","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"groups\", params: {\"search\" => query}.merge(params))).parse"}},{"id":"groups(params:Hash?=nil):JSON::Any-instance-method","html_id":"groups(params:Hash?=nil):JSON::Any-instance-method","name":"groups","doc":"Gets a list of groups.\n\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of groups\n\n```\nclient.groups\nclient.groups({\"per_page\" => \"100\", \"page\" => \"5\"})\n```","summary":"<p>Gets a list of groups.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"groups","args":[{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"groups\", params: params)).parse"}},{"id":"remove_group_member(group_id:Int32,user_id:Int32):JSON::Any-instance-method","html_id":"remove_group_member(group_id:Int32,user_id:Int32):JSON::Any-instance-method","name":"remove_group_member","doc":"Removes user from user group.\n\n- param  [Int32] group_id The group id to add a member to.\n- param  [Int32] user_id The user id of the user to add to the team.\n- return [JSON::Any] Information about added group member.\n\n```\nclient.remove_group_member(1, 2)\n```","summary":"<p>Removes user from user group.</p>","abstract":false,"args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(group_id : Int32, user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"remove_group_member","args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"groups/#{group_id}/members/#{user_id.to_s}\")).parse"}},{"id":"transfer_project_to_group(group_id,project_id):JSON::Any-instance-method","html_id":"transfer_project_to_group(group_id,project_id):JSON::Any-instance-method","name":"transfer_project_to_group","doc":"Transfers a project to a group\n\n- params [Int32] group_id The ID of a group.\n- params [Int32] project_id The ID of a project.\n\n```\nGitlab.transfer_project_to_group(3, 50)\n```","summary":"<p>Transfers a project to a group</p>","abstract":false,"args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":""},{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":""}],"args_string":"(group_id, project_id) : JSON::Any","source_link":null,"def":{"name":"transfer_project_to_group","args":[{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":""},{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"groups/#{group_id}/projects/#{project_id}\")).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Issue","path":"Gitlab/Client/Issue.html","kind":"module","full_name":"Gitlab::Client::Issue","name":"Issue","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to branch.\n\nEvery API call to issues must be authenticated.\n\nIf a user is not a member of a project and the project is private, a GET request on that project will result to a 404 status code.\n\nIssues pagination\n\nBy default, GET requests return 20 results at a time because the API results are paginated.\n\nRead more on [pagination](http://docs.gitlab.com/ce/api/README.html#pagination).\n\nSee [http://docs.gitlab.com/ce/api/issues.html](http://docs.gitlab.com/ce/api/issues.html)","summary":"<p>Defines methods related to branch.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"close_issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","html_id":"close_issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","name":"close_issue","doc":"Closes an issue.\n\nAlias to `edit_issue`(project_id, issue_id, { \"state_event\" => \"close\" })\n\n- param  [Integer] project The ID of a project.\n- param  [Integer] id The ID of an issue.\n- return [JSON::Any] Information about closed issue.\n\n```\nclient.close_issue(1, 1)\n```","summary":"<p>Closes an issue.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"args_string":"(project_id : Int32, issue_id : Int32) : JSON::Any","source_link":null,"def":{"name":"close_issue","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"edit_issue(project_id, issue_id, {\"state_event\" => \"close\"})"}},{"id":"create_issue(project_id:Int32,title:String,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"create_issue(project_id:Int32,title:String,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"create_issue","doc":"Create issue in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] title The title of an issue.\n- param  [Hash] params A customizable set of params.\n- option params [String] :description The description of an issue.\n- option params [String] :assignee_id The ID of a user to assign issue.\n- option params [String] :milestone_id The ID of a milestone to assign issue.\n- option params [String] :labels Comma-separated label names for an issue.\n- option params [String] :created_at Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z.\n- return [JSON::Any] Information about the created issue in a project.\n\n```\nclient.create_issue(1, \"support cli command\")\nclient.create_issue(1, \"error in debug mode\", {\"description\" => \"xxx\"})\n```","summary":"<p>Create issue in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project_id : Int32, title : String, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"create_issue","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/issues\", form: {\"title\" => title})).parse"}},{"id":"delete_issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","html_id":"delete_issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","name":"delete_issue","doc":"Delete an issue in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] issue_id The ID of an issue.\n- return [JSON::Any] Information about the deleted issue.\n\n```\nclient.delete_issue(4, 3)\n```","summary":"<p>Delete an issue in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"args_string":"(project_id : Int32, issue_id : Int32) : JSON::Any","source_link":null,"def":{"name":"delete_issue","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project_id}/issues/#{issue_id}\")).parse"}},{"id":"edit_issue(project_id:Int32,issue_id:Int32,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"edit_issue(project_id:Int32,issue_id:Int32,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"edit_issue","doc":"Edit an issue in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] issue_id The ID of an issue.\n- param  [Hash] params A customizable set of params.\n- option params [String] :title The title of an issue.\n- option params [String] :description The description of an issue.\n- option params [String] :assignee_id The ID of a user to assign issue.\n- option params [String] :milestone_id The ID of a milestone to assign issue.\n- option params [String] :labels Comma-separated label names for an issue.\n- option params [String] :state_event The state event of an issue. Set close to close the issue and reopen to reopen it.\n- option params [String] :created_at Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z.\n- return [JSON::Any] Information about the created issue in a project.\n\n```\nclient.create_issue(1, 1, \"support cli command\")\nclient.create_issue(1, 2, \"error in debug mode\", {\n  \"assignee_id\"  => \"3\",\n  \"milestone_id\" => 4,\n  \"labels\"       => \"bug,v1.0.0\",\n})\n```","summary":"<p>Edit an issue in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project_id : Int32, issue_id : Int32, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"edit_issue","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/issues/#{issue_id}\", form: form)).parse"}},{"id":"issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","html_id":"issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","name":"issue","doc":"Get single issue in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] issue_id The ID of an issue.\n- return [JSON::Any] Information about the issue.\n\n```\nclient.issue(1, 10)\n```","summary":"<p>Get single issue in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"args_string":"(project_id : Int32, issue_id : Int32) : JSON::Any","source_link":null,"def":{"name":"issue","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/issues/#{issue_id}\")).parse"}},{"id":"issues(params:Hash?=nil):JSON::Any-instance-method","html_id":"issues(params:Hash?=nil):JSON::Any-instance-method","name":"issues","doc":"Gets a list of issues.\n\n- param  [Hash] params A customizable set of params.\n- option params [String] :state Return all issues or just those that are opened or closed.\n- option params [String] :labels Return all issues or just those that are opened or closed.\n- option params [String] :order_by Return requests ordered by created_at or updated_at fields. Default is created_at.\n- option params [String] :sort Return requests sorted in asc or desc order. Default is desc.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of issues.\n\n```\nclient.issues\nclient.issues({\"per_page\" => \"10\"})\n```","summary":"<p>Gets a list of issues.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"issues","args":[{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"issues\", params: params)).parse"}},{"id":"issues(project_id:Int32|String,params:Hash?=nil):JSON::Any-instance-method","html_id":"issues(project_id:Int32|String,params:Hash?=nil):JSON::Any-instance-method","name":"issues","doc":"Gets a list isssues in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Hash] params A customizable set of params.\n- option params [String] :iid Return the issue having the given iid.\n- option params [String] :state Return all issues or just those that are opened or closed.\n- option params [String] :labels Return all issues or just those that are opened or closed.\n- option params [String] :milestone The milestone title.\n- option params [String] :order_by Return requests ordered by created_at or updated_at fields. Default is created_at.\n- option params [String] :sort Return requests sorted in asc or desc order. Default is desc.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of issues under a project.\n\n```\nclient.issue(1)\nclient.issue(1, {\"per_page\" => \"10\"})\n```","summary":"<p>Gets a list isssues in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32 | String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32 | String, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"issues","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32 | String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/issues\", params: params)).parse"}},{"id":"move_issue(project_id:Int32,issue_id:Int32,to_project_id:Int32):JSON::Any-instance-method","html_id":"move_issue(project_id:Int32,issue_id:Int32,to_project_id:Int32):JSON::Any-instance-method","name":"move_issue","doc":"Move an issue to another project.\n\n- param  [Int32] project_id The ID of a project\n- param  [Int32] issue_id The ID of an issue.\n- param  [Int32] to_project_id The ID of anthor to move project.\n- return [JSON::Any] Information about the moved issue.\n\n```\nclient.move_issue(4, 3)\n```","summary":"<p>Move an issue to another project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"to_project_id","doc":null,"default_value":"","external_name":"to_project_id","restriction":"Int32"}],"args_string":"(project_id : Int32, issue_id : Int32, to_project_id : Int32) : JSON::Any","source_link":null,"def":{"name":"move_issue","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"to_project_id","doc":null,"default_value":"","external_name":"to_project_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/issues/#{issue_id}/move\", form: {\"to_project_id\" => to_project_id})).parse"}},{"id":"reopen_issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","html_id":"reopen_issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","name":"reopen_issue","doc":"Reopens an issue.\n\nAlias to `edit_issue`(project_id, issue_id, { \"state_event\" => \"reopen\" })\n\n- param  [Integer] project The ID of a project.\n- param  [Integer] id The ID of an issue.\n- return [JSON::Any] Information about closed issue.\n\n```\nclient.close_issue(1, 1)\n```","summary":"<p>Reopens an issue.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"args_string":"(project_id : Int32, issue_id : Int32) : JSON::Any","source_link":null,"def":{"name":"reopen_issue","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"edit_issue(project_id, issue_id, {\"state_event\" => \"reopen\"})"}},{"id":"subscribe_issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","html_id":"subscribe_issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","name":"subscribe_issue","doc":"Subscribe an issue in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] issue_id The ID of an issue.\n- return [JSON::Any] Information about the subscribed issue in a project.\n\n```\nclient.subscribe_issue(1, 38)\n```","summary":"<p>Subscribe an issue in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"args_string":"(project_id : Int32, issue_id : Int32) : JSON::Any","source_link":null,"def":{"name":"subscribe_issue","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/issues/#{issue_id}/subscribe\")).parse"}},{"id":"unsubscribe_issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","html_id":"unsubscribe_issue(project_id:Int32,issue_id:Int32):JSON::Any-instance-method","name":"unsubscribe_issue","doc":"Unsubscribe an issue in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] issue_id The ID of an issue.\n- return [JSON::Any] Information about the subscribed issue in a project.\n\n```\nclient.unsubscribe_issue(1, 38)\n```","summary":"<p>Unsubscribe an issue in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"args_string":"(project_id : Int32, issue_id : Int32) : JSON::Any","source_link":null,"def":{"name":"unsubscribe_issue","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/issues/#{issue_id}/unsubscribe\")).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Key","path":"Gitlab/Client/Key.html","kind":"module","full_name":"Gitlab::Client::Key","name":"Key","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to key.\n\nSee [http://docs.gitlab.com/ce/api/keys.html](http://docs.gitlab.com/ce/api/keys.html)","summary":"<p>Defines methods related to key.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"key(key_id:Int32):JSON::Any-instance-method","html_id":"key(key_id:Int32):JSON::Any-instance-method","name":"key","doc":"Get SSH key in an authenticated user.\n\n- param  [String] key_id The ID or ssh key.\n- param  [String] password The password of a user.\n- return [JSON::Any] Information about logged in user.\n\n```\nclient.key(2)\n```","summary":"<p>Get SSH key in an authenticated user.</p>","abstract":false,"args":[{"name":"key_id","doc":null,"default_value":"","external_name":"key_id","restriction":"Int32"}],"args_string":"(key_id : Int32) : JSON::Any","source_link":null,"def":{"name":"key","args":[{"name":"key_id","doc":null,"default_value":"","external_name":"key_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"keys/#{key_id}\")).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Label","path":"Gitlab/Client/Label.html","kind":"module","full_name":"Gitlab::Client::Label","name":"Label","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to label.\n\nSee [http://docs.gitlab.com/ce/api/labels.html](http://docs.gitlab.com/ce/api/labels.html)","summary":"<p>Defines methods related to label.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"create_label(project_id:Int32,name:String,color:String,description:String?=nil):JSON::Any-instance-method","html_id":"create_label(project_id:Int32,name:String,color:String,description:String?=nil):JSON::Any-instance-method","name":"create_label","doc":"Create label in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] name The name of a label.\n- param  [String] color The color of the label in 6-digit hex notation with leading # sign.\n- param [String] description The description of the label.\n- return [JSON::Any] Information about the created label in a project.\n\n```\nclient.create_label(1, \"hotfix\", \"#E2C08D\")\nclient.create_label(1, \"feature\", \"#C678DD\", \"next release features\")\n```","summary":"<p>Create label in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":"String"},{"name":"description","doc":null,"default_value":"nil","external_name":"description","restriction":"String | ::Nil"}],"args_string":"(project_id : Int32, name : String, color : String, description : String? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"create_label","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":"String"},{"name":"description","doc":null,"default_value":"nil","external_name":"description","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"form = Hash(String, String).new.tap do |obj|\n  obj[\"name\"] = name\n  obj[\"color\"] = color\n  if description\n    obj[\"description\"] = description\n  end\nend\n(post(\"projects/#{project_id}/labels\", form: form)).parse\n"}},{"id":"delete_label(project_id:Int32,name:String):JSON::Any-instance-method","html_id":"delete_label(project_id:Int32,name:String):JSON::Any-instance-method","name":"delete_label","doc":"Delete a label in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] name The name of a label.\n- return [JSON::Any] Information about the deleted label.\n\n```\nclient.delete_issue(4, 3)\n```","summary":"<p>Delete a label in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(project_id : Int32, name : String) : JSON::Any","source_link":null,"def":{"name":"delete_label","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project_id}/labels\", form: {\"name\" => name})).parse"}},{"id":"edit_label(project_id:Int32,name:String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"edit_label(project_id:Int32,name:String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"edit_label","doc":"Edit a label in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] name The name of a label.\n- param  [Hash] params A customizable set of params.\n- option params [String] :new_name The new name of the label.\n- option params [String] :color The color of the label in 6-digit hex notation with leading # sign.\n- option params [String] :description The description of the label.\n- return [JSON::Any] Information about the updated label in a project.\n\n```\nclient.edit_label(1, \"hotfix\", {\"new_name\" => \"bugs\"})\nclient.edit_label(1, \"hotfix\", {\"color\" => \"#BE5046\"})\n```","summary":"<p>Edit a label in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project_id : Int32, name : String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"edit_label","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/labels\", form: {\"name\" => name}.merge(form))).parse"}},{"id":"labels(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"labels(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"labels","doc":"Gets a list labels in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of issues under a project.\n\n```\nclient.labels(1)\nclient.labels(1, {\"per_page\" => \"10\"})\n```","summary":"<p>Gets a list labels in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"labels","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/labels\", params: params)).parse"}},{"id":"subscribe_label(project_id:Int32,label_id:Int32|String):JSON::Any-instance-method","html_id":"subscribe_label(project_id:Int32,label_id:Int32|String):JSON::Any-instance-method","name":"subscribe_label","doc":"Subscribe a label in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] label_id The ID of a label.\n- return [JSON::Any] Information about the subscribed label in a project.\n\n```\nclient.subscribe_label(1, 38)\n```","summary":"<p>Subscribe a label in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"label_id","doc":null,"default_value":"","external_name":"label_id","restriction":"Int32 | String"}],"args_string":"(project_id : Int32, label_id : Int32 | String) : JSON::Any","source_link":null,"def":{"name":"subscribe_label","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"label_id","doc":null,"default_value":"","external_name":"label_id","restriction":"Int32 | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/labels/#{label_id}/subscribe\")).parse"}},{"id":"unsubscribe_label(project_id:Int32,label_id:Int32|String):JSON::Any-instance-method","html_id":"unsubscribe_label(project_id:Int32,label_id:Int32|String):JSON::Any-instance-method","name":"unsubscribe_label","doc":"Unsubscribe a label in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] label_id The ID of a label.\n- return [JSON::Any] Information about the subscribed label in a project.\n\n```\nclient.unsubscribe_label(1, 38)\n```","summary":"<p>Unsubscribe a label in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"label_id","doc":null,"default_value":"","external_name":"label_id","restriction":"Int32 | String"}],"args_string":"(project_id : Int32, label_id : Int32 | String) : JSON::Any","source_link":null,"def":{"name":"unsubscribe_label","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"label_id","doc":null,"default_value":"","external_name":"label_id","restriction":"Int32 | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/labels/#{label_id}/unsubscribe\")).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/MergeRequest","path":"Gitlab/Client/MergeRequest.html","kind":"module","full_name":"Gitlab::Client::MergeRequest","name":"MergeRequest","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to merge request.\n\nSee [http://docs.gitlab.com/ce/api/merge_requests.html](http://docs.gitlab.com/ce/api/merge_requests.html)","summary":"<p>Defines methods related to merge request.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"accept_merge_request(project_id:Int32,merge_request_id:Int32,form:Hash?=nil):JSON::Any-instance-method","html_id":"accept_merge_request(project_id:Int32,merge_request_id:Int32,form:Hash?=nil):JSON::Any-instance-method","name":"accept_merge_request","doc":"Accept a merge request in a project.\n\nMerge changes submitted with MR using this API.\n\nIf the merge succeeds you'll get a 200 OK.\n\nIf it has some conflicts and can not be merged - you'll get a 405 and the error message 'Branch cannot be merged'\n\nIf merge request is already merged or closed - you'll get a 406 and the error message 'Method Not Allowed'\n\nIf the sha parameter is passed and does not match the HEAD of the source - you'll get a 409 and the error message 'SHA does not match HEAD of source branch'\n\nIf you don't have permissions to accept this merge request - you'll get a 401\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of an merge_request.\n- return [JSON::Any] Information about the accepted merge requet.\n\n```\nclient.accept_merge_request(1, 3)\n```","summary":"<p>Accept a merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, merge_request_id : Int32, form : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"accept_merge_request","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/merge_requests/#{merge_request_id}/merge\", form: form)).parse"}},{"id":"cancel_merge_request_when_build_succeed(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","html_id":"cancel_merge_request_when_build_succeed(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","name":"cancel_merge_request_when_build_succeed","doc":"Cancel merge request when build succeeds in a project.\n\nIf successful you'll get 200 OK.\n\nIf you don't have permissions to accept this merge request - you'll get a 401\n\nIf the merge request is already merged or closed - you get 405 and error message 'Method Not Allowed'\n\nIn case the merge request is not set to be merged when the build succeeds, you'll also get a 406 error.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of an merge_request.\n- return [JSON::Any] Information about the accepted merge requet.\n\n```\nclient.cancel_merge_request_when_build_succeed(1, 3)\n```","summary":"<p>Cancel merge request when build succeeds in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"args_string":"(project_id : Int32, merge_request_id : Int32) : JSON::Any","source_link":null,"def":{"name":"cancel_merge_request_when_build_succeed","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/merge_requests/#{merge_request_id}/cancel_merge_when_build_succeeds\")).parse"}},{"id":"create_merge_request(project_id:Int32,source_branch:String,target_branch:String,title:String,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"create_merge_request(project_id:Int32,source_branch:String,target_branch:String,title:String,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"create_merge_request","doc":"Create a merge request in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] source_branch The name of a source branch.\n- param  [String] target_branch The name of a target branch.\n- param  [String] title The title of a merge request.\n- param  [Hash] params A customizable set of params.\n- option params [String] :assignee_id The ID pf assignee user.\n- option params [String] :description The description of the merge request.\n- option params [String] :target_project_id The target project (numeric id).\n- option params [String] :labels Labels for MR as a comma-separated list.\n- option params [String] :milestone_id The ID of the milestone.\n- return [JSON::Any] Information about the created merge_request in a project.\n\n```\nclient.create_merge_request(1, \"feature/xxx\", \"develop\", \"feature: support xxx\")\nclient.create_merge_request(1, \"hotfix/xxx\", \"master\", \"fix some bugs\", {\"milestone_id\" => \"2\"})\n```","summary":"<p>Create a merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"source_branch","doc":null,"default_value":"","external_name":"source_branch","restriction":"String"},{"name":"target_branch","doc":null,"default_value":"","external_name":"target_branch","restriction":"String"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project_id : Int32, source_branch : String, target_branch : String, title : String, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"create_merge_request","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"source_branch","doc":null,"default_value":"","external_name":"source_branch","restriction":"String"},{"name":"target_branch","doc":null,"default_value":"","external_name":"target_branch","restriction":"String"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/merge_requests\", form: {\"source_branch\" => source_branch, \"target_branch\" => target_branch, \"title\" => title}.merge(params))).parse"}},{"id":"delete_merge_request(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","html_id":"delete_merge_request(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","name":"delete_merge_request","doc":"Deiete a merge request in a project.\n\nOnly for admins and project owners. Soft deletes the merge request in question.\nIf the operation is successful, a status code 200 is returned.\nIn case you cannot destroy this merge request, or it is not present, code 404 is given.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of an merge_request.\n- return [JSON::Any] Information about the deleted merge requet.\n\n```\nclient.delete_merge_request(1, 3, 6)\n```","summary":"<p>Deiete a merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"args_string":"(project_id : Int32, merge_request_id : Int32) : JSON::Any","source_link":null,"def":{"name":"delete_merge_request","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project_id}/merge_requests/#{merge_request_id}\")).parse"}},{"id":"edit_merge_request(project_id:Int32,merge_request_id:Int32,source_branch:String,target_branch:String,title:String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"edit_merge_request(project_id:Int32,merge_request_id:Int32,source_branch:String,target_branch:String,title:String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"edit_merge_request","doc":"Edit a merge request in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of a merge request.\n- param  [String] source_branch The name of a source branch.\n- param  [String] target_branch The name of a target branch.\n- param  [String] title The title of a merge request.\n- param  [Hash] params A customizable set of params.\n- option params [String] :assignee_id The ID pf assignee user.\n- option params [String] :description The description of the merge request.\n- option params [String] :target_project_id The target project (numeric id).\n- option params [String] :state_event New state (close|reopen|merge).\n- option params [String] :labels Labels for MR as a comma-separated list.\n- option form [String] :milestone_id The ID of the milestone.\n- return [JSON::Any] Information about the created merge request in a project.\n\n```\nclient.create_merge_request(1, 4, \"feature/xxx\", \"develop\", \"feature: support xxx\")\nclient.create_merge_request(1, 6, \"hotfix/xxx\", \"master\", \"fix some bugs\", {\"state\" => \"close\"})\n```","summary":"<p>Edit a merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"source_branch","doc":null,"default_value":"","external_name":"source_branch","restriction":"String"},{"name":"target_branch","doc":null,"default_value":"","external_name":"target_branch","restriction":"String"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project_id : Int32, merge_request_id : Int32, source_branch : String, target_branch : String, title : String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"edit_merge_request","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"source_branch","doc":null,"default_value":"","external_name":"source_branch","restriction":"String"},{"name":"target_branch","doc":null,"default_value":"","external_name":"target_branch","restriction":"String"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/merge_requests/#{merge_request_id}\", form: {\"source_branch\" => source_branch, \"target_branch\" => target_branch, \"title\" => title}.merge(form))).parse"}},{"id":"merge_request(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","html_id":"merge_request(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","name":"merge_request","doc":"Get a single merge request in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of a merge request.\n- return [JSON::Any] Information about the merge request.\n\n```\nclient.merge_request(1, 10)\n```","summary":"<p>Get a single merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"args_string":"(project_id : Int32, merge_request_id : Int32) : JSON::Any","source_link":null,"def":{"name":"merge_request","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/merge_requests/#{merge_request_id}\")).parse"}},{"id":"merge_request_changes(project_id:Int32,merge_request_id:Int32,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"merge_request_changes(project_id:Int32,merge_request_id:Int32,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"merge_request_changes","doc":"List changes of a merge request in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of an merge_request.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of issues of merge request under a project.\n\n```\nclient.merge_request_changes(1, 3)\nclient.merge_request_changes(1, 4, {\"per_page\" => \"5\"})\n```","summary":"<p>List changes of a merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project_id : Int32, merge_request_id : Int32, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"merge_request_changes","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/merge_requests/#{merge_request_id}/changes\", params: params)).parse"}},{"id":"merge_request_closes_issues(project_id:Int32,merge_request_id:Int32,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"merge_request_closes_issues(project_id:Int32,merge_request_id:Int32,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"merge_request_closes_issues","doc":"List issues that will close on merge in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of an merge_request.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of issues of merge request under a project.\n\n```\nclient.merge_request_closes_issues(1, 3)\nclient.merge_request_closes_issues(1, 4, {\"per_page\" => \"5\"})\n```","summary":"<p>List issues that will close on merge in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project_id : Int32, merge_request_id : Int32, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"merge_request_closes_issues","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/merge_requests/#{merge_request_id}/closes_issues\", params: params)).parse"}},{"id":"merge_request_commits(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","html_id":"merge_request_commits(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","name":"merge_request_commits","doc":"List commits of merge requests in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Integer] id The ID of a merge request.\n\n```\nclient.merge_request_commits(1, 2)\n```","summary":"<p>List commits of merge requests in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"args_string":"(project_id : Int32, merge_request_id : Int32) : JSON::Any","source_link":null,"def":{"name":"merge_request_commits","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/merge_requests/#{merge_request_id}/commits\")).parse"}},{"id":"merge_requests(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"merge_requests(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"merge_requests","doc":"List merge requests in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Hash] params A customizable set of params.\n- option params [Int32] :iid Return the request having the given iid.\n- option params [String] :state Return all requests or just those that are merged, opened or closed.\n- option params [String] :order_by Return requests ordered by created_at or updated_at fields. Default is created_at\n- option params [String] :sort Return requests sorted in asc or desc order. Default is desc\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of merge requests under a project.\n\n```\nclient.merge_requests(1)\nclient.merge_requests(1, {\"state\" => \"opened\", \"per_page\" => \"10\"})\n```","summary":"<p>List merge requests in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"merge_requests","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/merge_requests\", params: params)).parse"}},{"id":"subscribe_merge_request(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","html_id":"subscribe_merge_request(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","name":"subscribe_merge_request","doc":"Subscribe a merge request in a project.\n\nSubscribes the authenticated user to a merge request to receive notification. If the operation is successful, status code 201 together with the updated merge request is returned. If the user is already subscribed to the merge request, the status code 304 is returned. If the project or merge request is not found, status code 404 is returned.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of an merge_request.\n- return [JSON::Any] Information about the subscribed merge request in a project.\n\n```\nclient.subscribe_merge_request(1, 38)\n```","summary":"<p>Subscribe a merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"args_string":"(project_id : Int32, merge_request_id : Int32) : JSON::Any","source_link":null,"def":{"name":"subscribe_merge_request","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/merge_requests/#{merge_request_id}/subscribe\")).parse"}},{"id":"unsubscribe_merge_request(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","html_id":"unsubscribe_merge_request(project_id:Int32,merge_request_id:Int32):JSON::Any-instance-method","name":"unsubscribe_merge_request","doc":"Unsubscribe a merge request in a project.\n\nUnsubscribes the authenticated user from a merge request to not receive notifications from that merge request. If the operation is successful, status code 200 together with the updated merge request is returned. If the user is not subscribed to the merge request, the status code 304 is returned. If the project or merge request is not found, status code 404 is returned.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of an merge_request.\n- return [JSON::Any] Information about the subscribed merge request in a project.\n\n```\nclient.unsubscribe_merge_request(1, 38)\n```","summary":"<p>Unsubscribe a merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"args_string":"(project_id : Int32, merge_request_id : Int32) : JSON::Any","source_link":null,"def":{"name":"unsubscribe_merge_request","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/merge_requests/#{merge_request_id}/unsubscribe\")).parse"}},{"id":"update_merge_request(project_id:Int32,merge_request_id,form:Hash?=nil)-instance-method","html_id":"update_merge_request(project_id:Int32,merge_request_id,form:Hash?=nil)-instance-method","name":"update_merge_request","doc":"Updates a merge request.\n\n- param  [Integer] project The ID or name of a project.\n- param  [Integer] id The ID of a merge request.\n- param  [Hash] form A customizable set of options.\n- option form [String] :title The title of a merge request.\n- option form [String] :source_branch The source branch name.\n- option form [String] :target_branch The target branch name.\n- option form [Integer] :assignee_id The ID of a user to assign merge request.\n- option form [String] :state_event New state (close|reopen|merge).\n\n```\nclient.update_merge_request(5, 42, { title: 'New title' })\n```","summary":"<p>Updates a merge request.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":""},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, merge_request_id, form : Hash? = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"update_merge_request","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":""},{"name":"form","doc":null,"default_value":"nil","external_name":"form","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(put(\"projects/#{project_id}/merge_requests/#{merge_request_id}\", form: form)).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Milestone","path":"Gitlab/Client/Milestone.html","kind":"module","full_name":"Gitlab::Client::Milestone","name":"Milestone","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to milestone.\n\nSee [http://docs.gitlab.com/ce/api/milestones.html](http://docs.gitlab.com/ce/api/milestones.html)","summary":"<p>Defines methods related to milestone.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"create_milestone(project_id:Int32,title:String,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"create_milestone(project_id:Int32,title:String,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"create_milestone","doc":"Create a milestone in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] title The title of a milestone.\n- param  [Hash] params A customizable set of params.\n- option params [String] :description The description of the milestone.\n- option params [String] :due_date The due date of the milestone.\n- return [JSON::Any] Information about the created milestone in a project.\n\n```\nclient.create_milestone(1, \"v2.0\")\nclient.create_milestone(1, \"v2.0.1\", \"fix some bugs\")\n```","summary":"<p>Create a milestone in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project_id : Int32, title : String, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"create_milestone","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/milestones\", form: {\"title\" => title}.merge(params))).parse"}},{"id":"edit_milestone(project_id:Int32,milestone_id:Int32,title:String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"edit_milestone(project_id:Int32,milestone_id:Int32,title:String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"edit_milestone","doc":"Edit a milestone in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] milestone_id The ID of a milestone.\n- param  [String] title The title of a milestone.\n- param  [Hash] params A customizable set of params.\n- option params [String] :description The description of the milestone.\n- option params [String] :due_date The due date of the milestone.\n- return [JSON::Any] Information about the created milestone in a project.\n\n```\nclient.edit_milestone(1, \"v2.0\")\nclient.edit_milestone(1, \"v2.0.1\", \"fix some bugs\")\n```","summary":"<p>Edit a milestone in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"milestone_id","doc":null,"default_value":"","external_name":"milestone_id","restriction":"Int32"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project_id : Int32, milestone_id : Int32, title : String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"edit_milestone","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"milestone_id","doc":null,"default_value":"","external_name":"milestone_id","restriction":"Int32"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/milestones/#{milestone_id}\", form: {\"title\" => title}.merge(form))).parse"}},{"id":"milestone(project_id:Int32,milestone_id:Int32):JSON::Any-instance-method","html_id":"milestone(project_id:Int32,milestone_id:Int32):JSON::Any-instance-method","name":"milestone","doc":"Get a single milestone in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] milestone_id The ID of a milestone.\n- return [JSON::Any] Information about the milestone.\n\n```\nclient.milestone(1, 10)\n```","summary":"<p>Get a single milestone in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"milestone_id","doc":null,"default_value":"","external_name":"milestone_id","restriction":"Int32"}],"args_string":"(project_id : Int32, milestone_id : Int32) : JSON::Any","source_link":null,"def":{"name":"milestone","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"milestone_id","doc":null,"default_value":"","external_name":"milestone_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/milestones/#{milestone_id}\")).parse"}},{"id":"milestone_issues(project_id:Int32,milestone_id:Int32,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"milestone_issues(project_id:Int32,milestone_id:Int32,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"milestone_issues","doc":"List issues of a milestone in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] milestone_id The ID of a milestone.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of issues of milestone under a project.\n\n```\nclient.milestone_issues(1, 3)\nclient.milestone_issues(1, 4, {\"per_page\" => \"5\"})\n```","summary":"<p>List issues of a milestone in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"milestone_id","doc":null,"default_value":"","external_name":"milestone_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project_id : Int32, milestone_id : Int32, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"milestone_issues","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"milestone_id","doc":null,"default_value":"","external_name":"milestone_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/milestones/#{milestone_id}/issues\", params: params)).parse"}},{"id":"milestone_merge_requests(project_id:Int32,milestone_id:Int32,params:Hash={}ofString=>String)-instance-method","html_id":"milestone_merge_requests(project_id:Int32,milestone_id:Int32,params:Hash={}ofString=>String)-instance-method","name":"milestone_merge_requests","doc":"Gets the merge_requests of a given milestone.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] milestone_id The ID of a milestone.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of issues of milestone under a project.\n\n```\nclient.milestone_merge_requests(5, 2)\n```","summary":"<p>Gets the merge_requests of a given milestone.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"milestone_id","doc":null,"default_value":"","external_name":"milestone_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project_id : Int32, milestone_id : Int32, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>)","source_link":null,"def":{"name":"milestone_merge_requests","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"milestone_id","doc":null,"default_value":"","external_name":"milestone_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(get(\"projects/#{project_id}/milestones/#{milestone_id}/merge_requests\", params: params)).parse"}},{"id":"milestones(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"milestones(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"milestones","doc":"List milestones in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Hash] params A customizable set of params.\n- option params [Int32] :iid Return only the milestone having the given iid.\n- option params [String] :state Return only active or closed milestones.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of milestones under a project.\n\n```\nclient.milestones(1)\nclient.milestones(1, {\"state\" => \"active\", \"per_page\" => \"10\"})\n```","summary":"<p>List milestones in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"milestones","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/milestones\", params: params)).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Note","path":"Gitlab/Client/Note.html","kind":"module","full_name":"Gitlab::Client::Note","name":"Note","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to note.\n\nNotes are comments on snippets, issues or merge requests..\n\nSee [http://docs.gitlab.com/ce/api/notes.html](http://docs.gitlab.com/ce/api/notes.html)","summary":"<p>Defines methods related to note.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"create_issue_note(project_id:Int32,issue_id:Int32,body:String,created_at:String?=nil):JSON::Any-instance-method","html_id":"create_issue_note(project_id:Int32,issue_id:Int32,body:String,created_at:String?=nil):JSON::Any-instance-method","name":"create_issue_note","doc":"Create note of issue in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] issue_id The ID of an issue.\n- param  [String] body The body of a note.\n- params [String] created_at Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z.\n- return [JSON::Any] Information about the created note of issue in a project.\n\n```\nclient.create_issue_note(1, 10, \"great work!\")\nclient.create_issue_note(1, 12, \"great work!\", \"2016-03-11T03:45:40Z\")\n```","summary":"<p>Create note of issue in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"created_at","doc":null,"default_value":"nil","external_name":"created_at","restriction":"String | ::Nil"}],"args_string":"(project_id : Int32, issue_id : Int32, body : String, created_at : String? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"create_issue_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"created_at","doc":null,"default_value":"nil","external_name":"created_at","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"form = Hash(String, String).new.tap do |obj|\n  obj[\"body\"] = body\n  if created_at\n    obj[\"created_at\"] = created_at\n  end\nend\n(post(\"projects/#{project_id}/issues/#{issue_id}/notes\", form: form)).parse\n"}},{"id":"create_merge_request_note(project_id:Int32,merge_request_id:Int32,body:String,created_at:String?=nil):JSON::Any-instance-method","html_id":"create_merge_request_note(project_id:Int32,merge_request_id:Int32,body:String,created_at:String?=nil):JSON::Any-instance-method","name":"create_merge_request_note","doc":"Create note of merge request in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of a merge request.\n- param  [String] body The title of an merge_requests.\n- return [JSON::Any] Information about the created note of merge request in a project.\n\n```\nclient.create_merge_request_note(1, 10, \"great work!\")\n```","summary":"<p>Create note of merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"created_at","doc":null,"default_value":"nil","external_name":"created_at","restriction":"String | ::Nil"}],"args_string":"(project_id : Int32, merge_request_id : Int32, body : String, created_at : String? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"create_merge_request_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"created_at","doc":null,"default_value":"nil","external_name":"created_at","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/merge_requests/#{merge_request_id}/notes\", form: {\"body\" => body})).parse"}},{"id":"create_snippet_note(project_id:Int32,snippet_id:Int32,body:String):JSON::Any-instance-method","html_id":"create_snippet_note(project_id:Int32,snippet_id:Int32,body:String):JSON::Any-instance-method","name":"create_snippet_note","doc":"Create note of snippet in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] snippet_id The ID of an snippet.\n- param  [String] body The body of an snippet.\n- return [JSON::Any] Information about the created note of snippet in a project.\n\n```\nclient.create_snippet_note(1, 10, \"great work!\")\n```","summary":"<p>Create note of snippet in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"snippet_id","doc":null,"default_value":"","external_name":"snippet_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"args_string":"(project_id : Int32, snippet_id : Int32, body : String) : JSON::Any","source_link":null,"def":{"name":"create_snippet_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"snippet_id","doc":null,"default_value":"","external_name":"snippet_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/snippets/#{snippet_id}/notes\", form: {\"body\" => body})).parse"}},{"id":"delete_issue_note(project_id:Int32,issue_id:Int32,note_id:Int32):JSON::Any-instance-method","html_id":"delete_issue_note(project_id:Int32,issue_id:Int32,note_id:Int32):JSON::Any-instance-method","name":"delete_issue_note","doc":"Deiete a note of issue in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] issue_id The ID of an issue.\n- param  [Int32] note_id The ID of a note.\n- return [JSON::Any] Information about the deleted note of issue.\n\n```\nclient.delete_issue_note(1, 3, 6)\n```","summary":"<p>Deiete a note of issue in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"args_string":"(project_id : Int32, issue_id : Int32, note_id : Int32) : JSON::Any","source_link":null,"def":{"name":"delete_issue_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project_id}/issues/#{issue_id}/notes/#{note_id}\")).parse"}},{"id":"delete_merge_request_note(project_id:Int32,merge_request_id:Int32,note_id:Int32):JSON::Any-instance-method","html_id":"delete_merge_request_note(project_id:Int32,merge_request_id:Int32,note_id:Int32):JSON::Any-instance-method","name":"delete_merge_request_note","doc":"Deiete a note of merge request in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of a merge request.\n- param  [Int32] note_id The ID of a note.\n- return [JSON::Any] Information about the deleted note of merge request.\n\n```\nclient.delete_merge_request_note(1, 3, 6)\n```","summary":"<p>Deiete a note of merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"args_string":"(project_id : Int32, merge_request_id : Int32, note_id : Int32) : JSON::Any","source_link":null,"def":{"name":"delete_merge_request_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project_id}/merge_requests/#{merge_request_id}/notes/#{note_id}\")).parse"}},{"id":"delete_snippet_note(project_id:Int32,snippet_id:Int32,note_id:Int32):JSON::Any-instance-method","html_id":"delete_snippet_note(project_id:Int32,snippet_id:Int32,note_id:Int32):JSON::Any-instance-method","name":"delete_snippet_note","doc":"Deiete a note of snippet in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] snippet_id The ID of an snippet.\n- param  [Int32] note_id The ID of a note.\n- return [JSON::Any] Information about the deleted note of snippet.\n\n```\nclient.delete_snippet_note(1, 3, 6)\n```","summary":"<p>Deiete a note of snippet in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"snippet_id","doc":null,"default_value":"","external_name":"snippet_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"args_string":"(project_id : Int32, snippet_id : Int32, note_id : Int32) : JSON::Any","source_link":null,"def":{"name":"delete_snippet_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"snippet_id","doc":null,"default_value":"","external_name":"snippet_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project_id}/snippets/#{snippet_id}/notes/#{note_id}\")).parse"}},{"id":"edit_issue_note(project_id:Int32,issue_id:Int32,note_id:Int32,body:String):JSON::Any-instance-method","html_id":"edit_issue_note(project_id:Int32,issue_id:Int32,note_id:Int32,body:String):JSON::Any-instance-method","name":"edit_issue_note","doc":"Edit a note of issue in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] issue_id The ID of an issue.\n- param  [Int32] note_id The ID of a note.\n- param  [String] body The body of a note.\n- return [JSON::Any] Information about the updated issue in a project.\n\n```\nclient.edit_issue_note(1, 10, 22, \"great work!\")\n```","summary":"<p>Edit a note of issue in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"args_string":"(project_id : Int32, issue_id : Int32, note_id : Int32, body : String) : JSON::Any","source_link":null,"def":{"name":"edit_issue_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/issues/#{issue_id}/notes/#{note_id}\", form: {\"body\" => body})).parse"}},{"id":"edit_merge_request_note(project_id:Int32,merge_requests_id:Int32,note_id:Int32,body:String):JSON::Any-instance-method","html_id":"edit_merge_request_note(project_id:Int32,merge_requests_id:Int32,note_id:Int32,body:String):JSON::Any-instance-method","name":"edit_merge_request_note","doc":"Edit a note of merge request in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of an merge request.\n- param  [Int32] note_id The ID of a note.\n- param  [String] body The title of a merge request.\n- return [JSON::Any] Information about the updated merge request in a project.\n\n```\nclient.edit_merge_request_note(1, 10, 22, \"great work!\")\n```","summary":"<p>Edit a note of merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_requests_id","doc":null,"default_value":"","external_name":"merge_requests_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"args_string":"(project_id : Int32, merge_requests_id : Int32, note_id : Int32, body : String) : JSON::Any","source_link":null,"def":{"name":"edit_merge_request_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_requests_id","doc":null,"default_value":"","external_name":"merge_requests_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/merge_requests/#{merge_requests_id}/notes/#{note_id}\", form: {\"body\" => body})).parse"}},{"id":"edit_snippet_note(project_id:Int32,snippet_id:Int32,note_id:Int32,body:String):JSON::Any-instance-method","html_id":"edit_snippet_note(project_id:Int32,snippet_id:Int32,note_id:Int32,body:String):JSON::Any-instance-method","name":"edit_snippet_note","doc":"Edit a note of snippet in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] snippet_id The ID of an snippet.\n- param  [Int32] note_id The ID of a note.\n- param  [String] body The body of an snippet.\n- return [JSON::Any] Information about the updated snippet in a project.\n\n```\nclient.edit_snippet_note(1, 10, 22, \"great work!\")\n```","summary":"<p>Edit a note of snippet in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"snippet_id","doc":null,"default_value":"","external_name":"snippet_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"args_string":"(project_id : Int32, snippet_id : Int32, note_id : Int32, body : String) : JSON::Any","source_link":null,"def":{"name":"edit_snippet_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"snippet_id","doc":null,"default_value":"","external_name":"snippet_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/snippets/#{snippet_id}/notes/#{note_id}\", form: {\"body\" => body})).parse"}},{"id":"issue_note(project_id:Int32,issue_id:Int32,note_id:Int32):JSON::Any-instance-method","html_id":"issue_note(project_id:Int32,issue_id:Int32,note_id:Int32):JSON::Any-instance-method","name":"issue_note","doc":"Get single note of issue in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] issue_id The ID of an issue.\n- param  [Int32] note_id The ID of a note.\n- return [JSON::Any] Information about the note of issue.\n\n```\nclient.issue_note(1, 10)\n```","summary":"<p>Get single note of issue in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"args_string":"(project_id : Int32, issue_id : Int32, note_id : Int32) : JSON::Any","source_link":null,"def":{"name":"issue_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/issues/#{issue_id}/notes/#{note_id}\")).parse"}},{"id":"issue_notes(project_id:Int32,issue_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"issue_notes(project_id:Int32,issue_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"issue_notes","doc":"Gets a list notes of issue in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] issue_id The ID of an issue.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of notes of issue under a project.\n\n```\nclient.issue_notes(1, 1)\nclient.issue_notes(1, 5, {\"per_page\" => \"10\"})\n```","summary":"<p>Gets a list notes of issue in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, issue_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"issue_notes","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"issue_id","doc":null,"default_value":"","external_name":"issue_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/issues/#{issue_id}/notes\", params: params)).parse"}},{"id":"merge_request_note(project_id:Int32,merge_request_id:Int32,note_id:Int32):JSON::Any-instance-method","html_id":"merge_request_note(project_id:Int32,merge_request_id:Int32,note_id:Int32):JSON::Any-instance-method","name":"merge_request_note","doc":"Get single note of merge request in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of a merge request.\n- param  [Int32] note_id The ID of a note.\n- return [JSON::Any] Information about the note of merge request.\n\n```\nclient.merge_request_note(1, 10)\n```","summary":"<p>Get single note of merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"args_string":"(project_id : Int32, merge_request_id : Int32, note_id : Int32) : JSON::Any","source_link":null,"def":{"name":"merge_request_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/merge_requests/#{merge_request_id}/notes/#{note_id}\")).parse"}},{"id":"merge_request_notes(project_id:Int32,merge_request_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"merge_request_notes(project_id:Int32,merge_request_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"merge_request_notes","doc":"Gets a list notes of merge request in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] merge_request_id The ID of a merge request.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of notes of merge request under a project.\n\n```\nclient.merge_request_notes(1, 1)\nclient.merge_request_notes(1, 5, {\"per_page\" => \"10\"})\n```","summary":"<p>Gets a list notes of merge request in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, merge_request_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"merge_request_notes","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"merge_request_id","doc":null,"default_value":"","external_name":"merge_request_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/merge_requests/#{merge_request_id}/notes\", params: params)).parse"}},{"id":"snippet_note(project_id:Int32,snippet_id:Int32,note_id:Int32):JSON::Any-instance-method","html_id":"snippet_note(project_id:Int32,snippet_id:Int32,note_id:Int32):JSON::Any-instance-method","name":"snippet_note","doc":"Get single note of snippet in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] snippet_id The ID of an snippet.\n- param  [Int32] note_id The ID of a note.\n- return [JSON::Any] Information about the note of snippet.\n\n```\nclient.snippet_note(1, 10)\n```","summary":"<p>Get single note of snippet in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"snippet_id","doc":null,"default_value":"","external_name":"snippet_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"args_string":"(project_id : Int32, snippet_id : Int32, note_id : Int32) : JSON::Any","source_link":null,"def":{"name":"snippet_note","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"snippet_id","doc":null,"default_value":"","external_name":"snippet_id","restriction":"Int32"},{"name":"note_id","doc":null,"default_value":"","external_name":"note_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/snippets/#{snippet_id}/notes/#{note_id}\")).parse"}},{"id":"snippet_notes(project_id:Int32,snippet_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"snippet_notes(project_id:Int32,snippet_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"snippet_notes","doc":"Gets a list notes of snippet in a project.\n\n- param  [Int32] project_id The ID of a project.\n- param  [Int32] snippet_id The ID of an snippet.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of notes of snippet under a project.\n\n```\nclient.snippet_notes(1, 1)\nclient.snippet_notes(1, 5, {\"per_page\" => \"10\"})\n```","summary":"<p>Gets a list notes of snippet in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"snippet_id","doc":null,"default_value":"","external_name":"snippet_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, snippet_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"snippet_notes","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"snippet_id","doc":null,"default_value":"","external_name":"snippet_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/snippets/#{snippet_id}/notes\", params: params)).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Project","path":"Gitlab/Client/Project.html","kind":"module","full_name":"Gitlab::Client::Project","name":"Project","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to project.\n\n### Project visibility level\n\nProject in GitLab has be either private, internal or public. You can determine it by visibility_level field in project.\n\nConstants for project visibility levels are next:\n\n- Private. visibility_level is 0. Project access must be granted explicitly for each user.\n\n- Internal. visibility_level is 10. The project can be cloned by any logged in user.\n\n- Public. visibility_level is 20. The project can be cloned without any authentication.\n\nSee [http://docs.gitlab.com/ce/api/projects.html](http://docs.gitlab.com/ce/api/projects.html)\n","summary":"<p>Defines methods related to project.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"add_project_hook(project:Int32|String,url:String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"add_project_hook(project:Int32|String,url:String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"add_project_hook","doc":"Create a web hook of a project.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [String] url The url of a web hook.\n- param  [Hash] form A customizable set of options.\n- option form [String] :push_events Trigger hook on push events.\n- option form [String] :issues_events Trigger hook on issues events.\n- option form [String] :merge_requests_events Trigger hook on merge_requests events.\n- option form [String] :tag_push_events Trigger hook on push_tag events.\n- option form [String] :note_events Trigger hook on note events.\n- option form [String] :enable_ssl_verification Do SSL verification when triggering the hook.\n- return [JSON::Any] Information about the created web hook.\n\n```\nclient.add_project_hook(42, \"https://hooks.slack.com/services/xxx\")\nclient.add_project_hook('gitlab', \"https://hooks.slack.com/services/xxx\", { \"issues_events\" => \"true\" })\n```","summary":"<p>Create a web hook of a project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"url","doc":null,"default_value":"","external_name":"url","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project : Int32 | String, url : String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"add_project_hook","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"url","doc":null,"default_value":"","external_name":"url","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project}/hooks\", form: form.merge({\"url\" => url}))).parse"}},{"id":"add_project_member(project:Int32|String,user_id:Int32,access_level:Int32):JSON::Any-instance-method","html_id":"add_project_member(project:Int32|String,user_id:Int32,access_level:Int32):JSON::Any-instance-method","name":"add_project_member","doc":"Adds a user to project team.\n\n- param  [Int32, String] project_id The ID or name of a project.\n- param  [Int32] user_id The ID of a user.\n- param  [Int32] access_level The access level to project.\n- return [JSON::Any] Information about added team member.\n\n```\nclient.add_project_member('gitlab', 2, 40)\n```","summary":"<p>Adds a user to project team.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"access_level","doc":null,"default_value":"","external_name":"access_level","restriction":"Int32"}],"args_string":"(project : Int32 | String, user_id : Int32, access_level : Int32) : JSON::Any","source_link":null,"def":{"name":"add_project_member","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"access_level","doc":null,"default_value":"","external_name":"access_level","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project}/members\", form: {\"user_id\" => user_id.to_s, \"access_level\" => access_level.to_s})).parse"}},{"id":"add_project_pages_domain(project:Int32|String,domain:String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"add_project_pages_domain(project:Int32|String,domain:String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"add_project_pages_domain","doc":"Adds a pages domain to project.\n\n- param  [Int32, String] project_id The ID or name of a project.\n- param  [String] domain The custom domain.\n- params [Hash] form A customizable set of options.\n- option form [Bool] :auto_ssl_enabled Enables automatic generation of SSL certificates issued by Let’s Encrypt for custom domains.\n- option form [String] :certificate The certificate in PEM format with intermediates following in most specific to least specific order.\n- option form [String] :key The certificate key in PEM format.\n- return [JSON::Any] Information about added pages domain.\n\n```\nclient.add_project_pages_domain('gitlab', \"pages-domain.com\", {\"auto_ssl_enabled\" => true})\n```","summary":"<p>Adds a pages domain to project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"domain","doc":null,"default_value":"","external_name":"domain","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project : Int32 | String, domain : String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"add_project_pages_domain","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"domain","doc":null,"default_value":"","external_name":"domain","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project}/pages/domains\", form: form.merge({\"domain\" => domain}))).parse"}},{"id":"all_projects(params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"all_projects(params:Hash={}ofString=>String):JSON::Any-instance-method","name":"all_projects","doc":"Gets a list of projects by the authenticated user (admin only).\n\nAlias to `projects`({ \"scope\" => \"all\" })\n\n```\nclient.all_projects\nclient.all_projects({\"order_by\" => \"last_activity_at\", \"sort\" => \"desc\"})\nclient.all_projects({\"search\" => \"keyword\"})\n```","summary":"<p>Gets a list of projects by the authenticated user (admin only).</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"all_projects","args":[{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"projects({\"scope\" => \"all\"}.merge(params))"}},{"id":"archive_project(project:Int32|String):JSON::Any-instance-method","html_id":"archive_project(project:Int32|String):JSON::Any-instance-method","name":"archive_project","doc":"Archive a project.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- return [JSON::Any] Information about the archive project.\n\n```\nclient.archive_project(42)\n```","summary":"<p>Archive a project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"args_string":"(project : Int32 | String) : JSON::Any","source_link":null,"def":{"name":"archive_project","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project}/archive\")).parse"}},{"id":"create_fork_from(project:Int32|String,forked_from_id:Int32):JSON::Any-instance-method","html_id":"create_fork_from(project:Int32|String,forked_from_id:Int32):JSON::Any-instance-method","name":"create_fork_from","doc":"Create a forked from/to relation between existing projects. Available only for admins.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Hash] branch The name of a branch.\n- return [JSON::Any] Information about the forked project.\n\n```\nclient.create_fork_from(1, 21)\n```","summary":"<p>Create a forked from/to relation between existing projects.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"forked_from_id","doc":null,"default_value":"","external_name":"forked_from_id","restriction":"Int32"}],"args_string":"(project : Int32 | String, forked_from_id : Int32) : JSON::Any","source_link":null,"def":{"name":"create_fork_from","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"forked_from_id","doc":null,"default_value":"","external_name":"forked_from_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project}/fork/#{forked_from_id}\")).parse"}},{"id":"create_project(user_id:Int32,name:String,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"create_project(user_id:Int32,name:String,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"create_project","doc":"Creates a new project for a user.\n\nAlias to `create_project`(params : Hash = {} of String => String)\n\n```\nclient.create_project(1, \"gitlab\")\nclient.create_project(1, \"gitlab\", { \"description: => \"Awesome project\" })\n```","summary":"<p>Creates a new project for a user.</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(user_id : Int32, name : String, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"create_project","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"create_project(name, {\"user_id\" => user_id.to_s}.merge(params))"}},{"id":"create_project(name:String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"create_project(name:String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"create_project","doc":"Creates a new project.\n\n- params [String] name The name of a project.\n- params [Hash] form A customizable set of options.\n- option form [String] :description The description of a project.\n- option form [String] :default_branch The default branch of a project.\n- option form [String] :namespace_id The namespace in which to create a project.\n- option form [String] :wiki_enabled The wiki integration for a project (0 = false, 1 = true).\n- option form [String] :wall_enabled The wall functionality for a project (0 = false, 1 = true).\n- option form [String] :issues_enabled The issues integration for a project (0 = false, 1 = true).\n- option form [String] :snippets_enabled The snippets integration for a project (0 = false, 1 = true).\n- option form [String] :merge_requests_enabled The merge requests functionality for a project (0 = false, 1 = true).\n- option form [String] :public The setting for making a project public (0 = false, 1 = true).\n- option form [String] :user_id The user/owner id of a project.\n- return [JSON::Any] Information about created project.\n\n```\nclient.create_project(\"gitlab\")\nclient.create_project(\"viking\", { \"description: => \"Awesome project\" })\nclient.create_project(\"Red\", { \"wall_enabled\" => \"false\" })\n```","summary":"<p>Creates a new project.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(name : String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"create_project","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"uri = if user_id = form[\"user_id\"]?\n  \"projects/user/#{user_id}\"\nelse\n  \"projects\"\nend\n(post(uri, form: form.merge({\"name\" => name}))).parse\n"}},{"id":"delete_project(project:Int32|String):JSON::Any-instance-method","html_id":"delete_project(project:Int32|String):JSON::Any-instance-method","name":"delete_project","doc":"Deletes a project.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- return [JSON::Any] Information about the deleted project.\n\n```\nclient.delete_project(42)\n```","summary":"<p>Deletes a project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"args_string":"(project : Int32 | String) : JSON::Any","source_link":null,"def":{"name":"delete_project","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project}\")).parse"}},{"id":"edit_project(project:Int32|String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"edit_project(project:Int32|String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"edit_project","doc":"Updates an existing project.\n\n- params [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- params [Hash] form A customizable set of options.\n- option form [String] :name The name of a project.\n- option form [String] :path The name of a project.\n- option form [String] :description The name of a project.\n- return [JSON::Any] Information about the edited project.\n\n```\nclient.edit_project(42)\nclient.edit_project(42, {\"name\" => \"project_name\"})\n```","summary":"<p>Updates an existing project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project : Int32 | String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"edit_project","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project}\", form: form)).parse"}},{"id":"edit_project_hook(project:Int32|String,hook_id:Int32,url:String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"edit_project_hook(project:Int32|String,hook_id:Int32,url:String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"edit_project_hook","doc":"Updates a web hook of a project.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Int32] hook_id The ID of a web hook.\n- param  [Int32] url The url of a web hook.\n- param  [Hash] form A customizable set of options.\n- option form [String] :push_events Trigger hook on push events.\n- option form [String] :issues_events Trigger hook on issues events.\n- option form [String] :merge_requests_events Trigger hook on merge_requests events.\n- option form [String] :tag_push_events Trigger hook on push_tag events.\n- option form [String] :note_events Trigger hook on note events.\n- option form [String] :enable_ssl_verification Do SSL verification when triggering the hook.\n- return [JSON::Any] Information about updated web hook.\n\n```\nclient.edit_project_hook('gitlab', 3, \"https://hooks.slack.com/services/xxx\")\n```","summary":"<p>Updates a web hook of a project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"hook_id","doc":null,"default_value":"","external_name":"hook_id","restriction":"Int32"},{"name":"url","doc":null,"default_value":"","external_name":"url","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project : Int32 | String, hook_id : Int32, url : String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"edit_project_hook","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"hook_id","doc":null,"default_value":"","external_name":"hook_id","restriction":"Int32"},{"name":"url","doc":null,"default_value":"","external_name":"url","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project}/hooks/#{hook_id}\", form: form.merge({\"url\" => url}))).parse"}},{"id":"edit_project_member(project:Int32|String,user_id,access_level):JSON::Any-instance-method","html_id":"edit_project_member(project:Int32|String,user_id,access_level):JSON::Any-instance-method","name":"edit_project_member","doc":"Updates a team member's project access level.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Int32] user_id The ID of a user.\n- param  [Int32] access_level The access level to project.\n- return [JSON::Any] Information about updated team member.\n\n```\nclient.edit_project_member('gitlab', 3, 20)\n```","summary":"<p>Updates a team member's project access level.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":""},{"name":"access_level","doc":null,"default_value":"","external_name":"access_level","restriction":""}],"args_string":"(project : Int32 | String, user_id, access_level) : JSON::Any","source_link":null,"def":{"name":"edit_project_member","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":""},{"name":"access_level","doc":null,"default_value":"","external_name":"access_level","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project}/members/#{user_id}\", form: {\"access_level\" => access_level})).parse"}},{"id":"edit_project_pages_domain(project:Int32|String,domain:String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"edit_project_pages_domain(project:Int32|String,domain:String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"edit_project_pages_domain","doc":"Updates a pages domain project.\n\n- param  [Int32, String] project_id The ID or name of a project.\n- param  [String] domain The custom domain.\n- params [Hash] form A customizable set of options.\n- option form [Bool] :auto_ssl_enabled Enables automatic generation of SSL certificates issued by Let’s Encrypt for custom domains.\n- option form [String] :certificate The certificate in PEM format with intermediates following in most specific to least specific order.\n- option form [String] :key The certificate key in PEM format.\n- return [JSON::Any] Information about added pages domain.\n\n```\nclient.edit_project_pages_domain('gitlab', \"pages-domain.com\", {\"auto_ssl_enabled\" => true})\n```","summary":"<p>Updates a pages domain project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"domain","doc":null,"default_value":"","external_name":"domain","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project : Int32 | String, domain : String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"edit_project_pages_domain","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"domain","doc":null,"default_value":"","external_name":"domain","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project}/pages/domains\", form: form.merge({\"domain\" => domain}))).parse"}},{"id":"fork_project(project:Int32|String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"fork_project(project:Int32|String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"fork_project","doc":"Forks a project into the user namespace.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Hash] form A customizable set of options.\n- option form [String] :sudo The username the project will be forked for.\n- return [JSON::Any] Information about the forked project.\n\n```\nclient.create_fork(42)\nclient.create_fork(42, {\"sudo\" => \"another_username\"})\n```","summary":"<p>Forks a project into the user namespace.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project : Int32 | String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"fork_project","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project}/fork\", form: form)).parse"}},{"id":"owned_projects(params:Hash?={}ofString=>String):JSON::Any-instance-method","html_id":"owned_projects(params:Hash?={}ofString=>String):JSON::Any-instance-method","name":"owned_projects","doc":"Gets a list of projects owned by the authenticated user.\n\nAlias to `projects`({ \"scope\" => \"owned\" })\n\n```\nclient.owned_projects\nclient.owned_projects({\"order_by\" => \"last_activity_at\", \"sort\" => \"desc\"})\nclient.owned_projects({\"search\" => \"keyword\"})\n```","summary":"<p>Gets a list of projects owned by the authenticated user.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(params : Hash? = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"owned_projects","args":[{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"projects({\"scope\" => \"owned\"}.merge(params))"}},{"id":"project(project:Int32|String):JSON::Any-instance-method","html_id":"project(project:Int32|String):JSON::Any-instance-method","name":"project","doc":"Gets information about a project.\n\n- params  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- return [JSON::Any] Information about project.\n\n```\nclient.project(\"gitlab\")\n```","summary":"<p>Gets information about a project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"args_string":"(project : Int32 | String) : JSON::Any","source_link":null,"def":{"name":"project","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project}\")).parse"}},{"id":"project_branch(project:Int32|String,branch:String):JSON::Any-instance-method","html_id":"project_branch(project:Int32|String,branch:String):JSON::Any-instance-method","name":"project_branch","doc":"Get a branch of a project.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Int32] branch The name of a branch.\n- return [JSON::Any] Information about the branch under a project.\n\n```\nclient.project_branch(42)\nclient.project_branch('gitlab', \"develop\")\n```","summary":"<p>Get a branch of a project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"args_string":"(project : Int32 | String, branch : String) : JSON::Any","source_link":null,"def":{"name":"project_branch","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project}/repository/branches/#{branch}\")).parse"}},{"id":"project_branchs(project:Int32|String,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"project_branchs(project:Int32|String,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"project_branchs","doc":"Get a list of a project's branches.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Hash] options A customizable set of options.\n- option options [Int32] :page The page number.\n- option options [Int32] :per_page The number of results per page.\n- return [JSON::Any] List of branches under a project.\n\n```\nclient.project_branchs(42)\nclient.project_branchs('gitlab', { \"per_page\" => \"4\" })\n```","summary":"<p>Get a list of a project's branches.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project : Int32 | String, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"project_branchs","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project}/repository/branches\", params: params)).parse"}},{"id":"project_events(project:Int32|String,params:Hash?=nil):JSON::Any-instance-method","html_id":"project_events(project:Int32|String,params:Hash?=nil):JSON::Any-instance-method","name":"project_events","doc":"Gets a list of project events.\n\n- params  [Int32, String] project The ID of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- params  [Hash] options A customizable set of options.\n- option params [Int32] :page The page number.\n- option params [Int32] :per_page The number of results per page.\n- return [JSON::Any] List of events under a project.\n\n```\nclient.project_events(42)\n```","summary":"<p>Gets a list of project events.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project : Int32 | String, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"project_events","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project}/events\", params: params)).parse"}},{"id":"project_hook(project:Int32|String,hook_id:Int32):JSON::Any-instance-method","html_id":"project_hook(project:Int32|String,hook_id:Int32):JSON::Any-instance-method","name":"project_hook","doc":"Get a web hook of a project.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Int32] hook_id The ID of a web hook.\n- return [JSON::Any] Information about the web hook.\n\n```\nclient.project_hook(42)\nclient.project_hook('gitlab', 1)\n```","summary":"<p>Get a web hook of a project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"hook_id","doc":null,"default_value":"","external_name":"hook_id","restriction":"Int32"}],"args_string":"(project : Int32 | String, hook_id : Int32) : JSON::Any","source_link":null,"def":{"name":"project_hook","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"hook_id","doc":null,"default_value":"","external_name":"hook_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project}/hooks/#{hook_id}\")).parse"}},{"id":"project_hooks(project:Int32|String,params:Hash?=nil):JSON::Any-instance-method","html_id":"project_hooks(project:Int32|String,params:Hash?=nil):JSON::Any-instance-method","name":"project_hooks","doc":"Get a list of a project's web hooks.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Hash] params A customizable set of options.\n- option params [Int32] :page The page number.\n- option params [Int32] :per_page The number of results per page.\n- return [JSON::Any] List of web hooks under a project.\n\n```\nclient.project_hooks(42)\nclient.project_hooks('gitlab', { \"per_page\" => \"4\" })\n```","summary":"<p>Get a list of a project's web hooks.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project : Int32 | String, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"project_hooks","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project}/hooks\", params: params)).parse"}},{"id":"project_member(project:Int32|String,user_id:Int32):JSON::Any-instance-method","html_id":"project_member(project:Int32|String,user_id:Int32):JSON::Any-instance-method","name":"project_member","doc":"Gets a project team member.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Int32] user_id The ID of a project team member.\n- return [JSON::Any] Information about member under a project.\n\n```\nclient.project_member(1, 2)\n```","summary":"<p>Gets a project team member.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(project : Int32 | String, user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"project_member","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project}/members/#{user_id}\")).parse"}},{"id":"project_members(project:Int32|String,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"project_members(project:Int32|String,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"project_members","doc":"Get a list of a project's team members.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Hash] options A customizable set of options.\n- option options [String] :query The search query.\n- option options [Int32] :page The page number.\n- option options [Int32] :per_page The number of results per page.\n- return [JSON::Any] List of team members under a project.\n\n```\nclient.project_members(42)\nclient.project_members('gitlab')\n```","summary":"<p>Get a list of a project's team members.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(project : Int32 | String, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"project_members","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project}/members\", params: params)).parse"}},{"id":"project_pages_domain(project:Int32|String,domain:String):JSON::Any-instance-method","html_id":"project_pages_domain(project:Int32|String,domain:String):JSON::Any-instance-method","name":"project_pages_domain","doc":"Gets a project pages domain.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [String] The custom domain.\n- return [JSON::Any] Information about pages domain under a project.\n\n```\nclient.project_pages_domain(1, \"pages-domain.com\")\n```","summary":"<p>Gets a project pages domain.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"domain","doc":null,"default_value":"","external_name":"domain","restriction":"String"}],"args_string":"(project : Int32 | String, domain : String) : JSON::Any","source_link":null,"def":{"name":"project_pages_domain","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"domain","doc":null,"default_value":"","external_name":"domain","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project}/pages/domains/#{domain}\")).parse"}},{"id":"project_pages_domains(project:Int32|String):JSON::Any-instance-method","html_id":"project_pages_domains(project:Int32|String):JSON::Any-instance-method","name":"project_pages_domains","doc":"Get a list of a project's pages domains.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- return [JSON::Any] List of pages domains under a project.\n\n```\nclient.project_pages_domains(42)\nclient.project_pages_domains('gitlab')\n```","summary":"<p>Get a list of a project's pages domains.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"args_string":"(project : Int32 | String) : JSON::Any","source_link":null,"def":{"name":"project_pages_domains","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project}/pages/domains\")).parse"}},{"id":"project_search(query,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"project_search(query,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"project_search","doc":"Search for project by name\n\n- param  [String] query A string to search for in group names and paths.\n- param  [Hash] params A customizable set of params.\n- option params [String] :per_page Number of projects to return per page.\n- option params [String] :page The page to retrieve.\n- option params [String] :order_by Return requests ordered by id, name, created_at or last_activity_at fields.\n- option params [String] :sort Return requests sorted in asc or desc order.\n- return [JSON::Any] List of projects under search qyery.\n\n```\nclient.project_search(\"gitlab\")\nclient.project_search(\"gitlab\", {\"per_page\" => 50})\n```","summary":"<p>Search for project by name</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(query, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"project_search","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects\", params: params.merge({\"search\" => query}))).parse"}},{"id":"projects(params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"projects(params:Hash={}ofString=>String):JSON::Any-instance-method","name":"projects","doc":"Gets single issue in the project.\n\n- params  [Hash] params A customizable set of params.\n- option params [String] :scope Scope of projects. \"owned\" for list of projects owned by the authenticated user, \"starred\" for list of projects starred by the authenticated user, \"all\" to get all projects (admin only)\n- option params [String] :archived if passed, limit by archived status.\n- option params [String] :visibility if passed, limit by visibility public, internal, private.\n- option params [String] :order_by Return requests ordered by id, name, path, created_at, updated_at or last_activity_at fields. Default is created_at.\n- option params [String] :sort Return requests sorted in asc or desc order. Default is desc.\n- option params [String] :search Return list of authorized projects according to a search criteria.\n- option params [Int32] :page The page number.\n- option params [Int32] :per_page The number of results per page.\n- return [JSON::Any] List of projects of the authorized user.\n\n```\nclient.projects\nclient.projects({\"order_by\" => \"last_activity_at\", \"sort\" => \"desc\"})\nclient.projects({\"scope\" => \"starred\", \"search\" => \"keyword\"})\n```","summary":"<p>Gets single issue in the project.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"projects","args":[{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"scopes = [\"owned\", \"starred\", \"all\"] of ::String\nuri = if (params.has_key?(\"scope\")) && (scopes.includes?(params[\"scope\"]))\n  \"projects/#{params[\"scope\"]}\"\nelse\n  \"projects\"\nend\n(get(uri, params: params)).parse\n"}},{"id":"protect_project_branch(project:Int32|String,branch:String):JSON::Any-instance-method","html_id":"protect_project_branch(project:Int32|String,branch:String):JSON::Any-instance-method","name":"protect_project_branch","doc":"Protect a branch of a project.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Hash] branch The name of a branch.\n- return [JSON::Any] Information about the protected branch.\n\n```\nclient.protect_project_branch(2, \"master\")\nclient.protect_project_branch(\"gitlab\", \"master\")\n```","summary":"<p>Protect a branch of a project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"args_string":"(project : Int32 | String, branch : String) : JSON::Any","source_link":null,"def":{"name":"protect_project_branch","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project}/repository/branches/#{branch}/protect\")).parse"}},{"id":"remove_fork(project:Int32|String):JSON::Any-instance-method","html_id":"remove_fork(project:Int32|String):JSON::Any-instance-method","name":"remove_fork","doc":"Delete an existing forked from relationship. Available only for admins.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- return [JSON::Any] Information about the unforked project.\n\n```\nclient.remove_fork(1)\n```","summary":"<p>Delete an existing forked from relationship.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"args_string":"(project : Int32 | String) : JSON::Any","source_link":null,"def":{"name":"remove_fork","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project}/fork\")).parse"}},{"id":"remove_project_hook(project:Int32|String,hook_id:Int32):JSON::Any?-instance-method","html_id":"remove_project_hook(project:Int32|String,hook_id:Int32):JSON::Any?-instance-method","name":"remove_project_hook","doc":"Removes a user from project team.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Int32] hook_id The ID of a web hook.\n- return [JSON::Any | Nil] Information about removed web hook.\n\n```\nclient.remove_project_hook('gitlab', 2)\nclient.remove_project_hook(1, 2)\n```","summary":"<p>Removes a user from project team.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"hook_id","doc":null,"default_value":"","external_name":"hook_id","restriction":"Int32"}],"args_string":"(project : Int32 | String, hook_id : Int32) : JSON::Any?","source_link":null,"def":{"name":"remove_project_hook","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"hook_id","doc":null,"default_value":"","external_name":"hook_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any | ::Nil","visibility":"Public","body":"body = (delete(\"projects/#{project}/hooks/#{hook_id}\")).body\nif body.empty?\nelse\n  JSON.parse(body)\nend\n"}},{"id":"remove_project_member(project:Int32|String,user_id:Int32):JSON::Any-instance-method","html_id":"remove_project_member(project:Int32|String,user_id:Int32):JSON::Any-instance-method","name":"remove_project_member","doc":"Removes a user from project team.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Int32] user_id The ID of a user.\n- return [JSON::Any] Information about removed team member.\n\n```\nclient.remove_project_member('gitlab', 2)\n```","summary":"<p>Removes a user from project team.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(project : Int32 | String, user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"remove_project_member","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project}/members/#{user_id}\")).parse"}},{"id":"remove_project_pages_domain(project:Int32|String,domain:String):JSON::Any-instance-method","html_id":"remove_project_pages_domain(project:Int32|String,domain:String):JSON::Any-instance-method","name":"remove_project_pages_domain","doc":"Removes a pages domain from project.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [String] domain The custom domain.\n- return [JSON::Any] Information about removed team member.\n\n```\nclient.remove_project_pages_domain(1, \"pages-domain.com\")\n```","summary":"<p>Removes a pages domain from project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"domain","doc":null,"default_value":"","external_name":"domain","restriction":"String"}],"args_string":"(project : Int32 | String, domain : String) : JSON::Any","source_link":null,"def":{"name":"remove_project_pages_domain","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"domain","doc":null,"default_value":"","external_name":"domain","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project}/pages/domains/#{domain}\")).parse"}},{"id":"share_project(project:Int32|String,group_id:Int32,group_access=nil):JSON::Any-instance-method","html_id":"share_project(project:Int32|String,group_id:Int32,group_access=nil):JSON::Any-instance-method","name":"share_project","doc":"Share a project with a group.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Hash] options A customizable set of options.\n- option options [String] :sudo The username the project will be forked for.\n- return [JSON::Any] Information about the share project.\n\n```\nclient.share_project(2, 1)\nclient.share_project(2, 1, {\"group_access\" => \"50\"})\n```","summary":"<p>Share a project with a group.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"group_access","doc":null,"default_value":"nil","external_name":"group_access","restriction":""}],"args_string":"(project : Int32 | String, group_id : Int32, group_access = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"share_project","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"group_id","doc":null,"default_value":"","external_name":"group_id","restriction":"Int32"},{"name":"group_access","doc":null,"default_value":"nil","external_name":"group_access","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"form = {\"group_id\" => group_id}\nif group_access\n  form[\"group_access\"] = group_access\nend\n(post(\"projects/#{project}/share\", form: form)).parse\n"}},{"id":"star_project(project:Int32|String):JSON::Any-instance-method","html_id":"star_project(project:Int32|String):JSON::Any-instance-method","name":"star_project","doc":"Star a project for the authentication user.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- return [JSON::Any] Information about the starred project.\n\n```\nclient.star_project(42)\n```","summary":"<p>Star a project for the authentication user.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"args_string":"(project : Int32 | String) : JSON::Any","source_link":null,"def":{"name":"star_project","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project}/star\")).parse"}},{"id":"starred_projects(params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"starred_projects(params:Hash={}ofString=>String):JSON::Any-instance-method","name":"starred_projects","doc":"Gets a list of projects starred by the authenticated user.\n\nAlias to `projects`({ \"scope\" => \"starred\" })\n\n```\nclient.starred_projects\nclient.starred_projects({\"order_by\" => \"last_activity_at\", \"sort\" => \"desc\"})\nclient.starred_projects({\"search\" => \"keyword\"})\n```","summary":"<p>Gets a list of projects starred by the authenticated user.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"starred_projects","args":[{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"projects({\"scope\" => \"starred\"}.merge(params))"}},{"id":"unarchive_project(project:Int32|String):JSON::Any-instance-method","html_id":"unarchive_project(project:Int32|String):JSON::Any-instance-method","name":"unarchive_project","doc":"Unarchive a project.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- return [JSON::Any] Information about the unarchive project.\n\n```\nclient.unarchive_project(42)\n```","summary":"<p>Unarchive a project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"args_string":"(project : Int32 | String) : JSON::Any","source_link":null,"def":{"name":"unarchive_project","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project}/unarchive\")).parse"}},{"id":"unprotect_project_branch(project:Int32|String,branch:String):JSON::Any-instance-method","html_id":"unprotect_project_branch(project:Int32|String,branch:String):JSON::Any-instance-method","name":"unprotect_project_branch","doc":"Unprotect a branch of a project.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [Hash] branch The name of a branch.\n- return [JSON::Any] Information about the unprotect branch.\n\n```\nclient.unprotect_project_branch(2, \"master\")\nclient.unprotect_project_branch(\"gitlab\", \"master\")\n```","summary":"<p>Unprotect a branch of a project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"args_string":"(project : Int32 | String, branch : String) : JSON::Any","source_link":null,"def":{"name":"unprotect_project_branch","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"branch","doc":null,"default_value":"","external_name":"branch","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project}/repository/branches/#{branch}/unprotect\")).parse"}},{"id":"unstar_project(project:Int32|String):JSON::Any-instance-method","html_id":"unstar_project(project:Int32|String):JSON::Any-instance-method","name":"unstar_project","doc":"Unstar a project.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- return [JSON::Any] Information about the unstar project.\n\n```\nclient.unstar_project(42)\n```","summary":"<p>Unstar a project.</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"args_string":"(project : Int32 | String) : JSON::Any","source_link":null,"def":{"name":"unstar_project","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project}/star\")).parse"}},{"id":"upload_file(project:Int32|String,file:String):JSON::Any-instance-method","html_id":"upload_file(project:Int32|String,file:String):JSON::Any-instance-method","name":"upload_file","doc":"Upload a file in a project\n\nUploads a file to the specified project to be used in an issue or merge request description, or a comment.\n\n**Note**: The returned url is relative to the project path. In Markdown contexts, the link is automatically expanded when the format in markdown is used.\n\n- param  [Int32, String] project The ID or name of a project. If using namespaced projects call make sure that the NAMESPACE/PROJECT_NAME is URL-encoded.\n- param  [String] file The path of a file.\n- return [JSON::Any] Information about the uploaded file.\n\n```\nclient.upload_file(1, \"/Users/icyleaf/Desktop/snippets_ruby.rb\")\nclient.upload_file(1, \"/Users/icyleaf/Desktop/screenshot.png\")\nclient.upload_file(1, \"/Users/icyleaf/Desktop/archive.zip\")\n```","summary":"<p>Upload a file in a project</p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"String"}],"args_string":"(project : Int32 | String, file : String) : JSON::Any","source_link":null,"def":{"name":"upload_file","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project}/uploads\", form: {\"file\" => File.open(file)})).parse"}},{"id":"upload_file(project:Int32|String,file:File):JSON::Any-instance-method","html_id":"upload_file(project:Int32|String,file:File):JSON::Any-instance-method","name":"upload_file","doc":"Same as `upload_file`","summary":"<p>Same as <code><a href=\"../../Gitlab/Client/Project.html#upload_file(project:Int32%7CString,file:String):JSON::Any-instance-method\">#upload_file</a></code></p>","abstract":false,"args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"File"}],"args_string":"(project : Int32 | String, file : File) : JSON::Any","source_link":null,"def":{"name":"upload_file","args":[{"name":"project","doc":null,"default_value":"","external_name":"project","restriction":"Int32 | String"},{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"File"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project}/uploads\", form: {\"file\" => file})).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Repository","path":"Gitlab/Client/Repository.html","kind":"module","full_name":"Gitlab::Client::Repository","name":"Repository","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to repository.\n\nSee [http://docs.gitlab.com/ce/api/repositories.html](http://docs.gitlab.com/ce/api/repositories.html)","summary":"<p>Defines methods related to repository.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"blob(project_id:Int32,sha=&quot;HEAD&quot;,params:Hash?=nil):String-instance-method","html_id":"blob(project_id:Int32,sha=&quot;HEAD&quot;,params:Hash?=nil):String-instance-method","name":"blob","doc":"Get the raw file contents for a blob by blob SHA.\n\n- param  [Int32] project The ID of a project.\n- param  [String] sha The id of a commit sha.\n- return [String] The raw file contents\n\n```\nclient.blow_contents(1, \"74bbc1b7\")\nclient.blow_contents(1, \"a5c805f456f46b44e270f342330b06e06c53cbcc\")\n```","summary":"<p>Get the raw file contents for a blob by blob SHA.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"\"HEAD\"","external_name":"sha","restriction":""},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, sha = <span class=\"s\">&quot;HEAD&quot;</span>, params : Hash? = <span class=\"n\">nil</span>) : String","source_link":null,"def":{"name":"blob","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"\"HEAD\"","external_name":"sha","restriction":""},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/blobs/#{sha}\", params: params)).parse"}},{"id":"compare(project_id:Int32,from:String,to:String):JSON::Any-instance-method","html_id":"compare(project_id:Int32,from:String,to:String):JSON::Any-instance-method","name":"compare","doc":"Compare branches, tags or commits.\n\n- param  [Int32] project The ID of a project.\n- param  [String] from the commit SHA or branch name.\n- param  [String] to the commit SHA or branch name.\n- return [JSON::Any] List a compare between from and to.\n\n```\nclient.compare(1, \"master\", \"develop\")\nclient.compare(1, \"a5c805f4\", \"v1.0.0\")\n```","summary":"<p>Compare branches, tags or commits.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"String"},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"String"}],"args_string":"(project_id : Int32, from : String, to : String) : JSON::Any","source_link":null,"def":{"name":"compare","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"String"},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/compare\", params: {\"from\" => from, \"to\" => to})).parse"}},{"id":"contributors(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"contributors(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"contributors","doc":"Get repository contributors list\n\n- param  [Int32] project The ID of a project.\n- params  [Hash] options A customizable set of options.\n- option params [Int32] :page The page number.\n- option params [Int32] :per_page The number of results per page.\n- return [JSON::Any] List of projects of the authorized user.\n\n```\nclient.contributors(1)\nclient.contributors(1, {\"per_page\" => \"10\"})\n```","summary":"<p>Get repository contributors list</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"contributors","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"get(\"projects/#{project_id}/repository/contributors\", params: params)"}},{"id":"repo_archive(project_id:Int32,sha=&quot;HEAD&quot;):Gitlab::FileResponse|JSON::Any-instance-method","html_id":"repo_archive(project_id:Int32,sha=&quot;HEAD&quot;):Gitlab::FileResponse|JSON::Any-instance-method","name":"repo_archive","doc":"Get an archive of the repository.\n\n- param  [Int32] project The ID of a project.\n- param  [String] sha The commit SHA to download defaults to the tip of the default branch.\n- return [Gitlab::FileResponse, JSON::Any] The archive file.\n\n```\nfile = client.repo_archive(1)\nfile = client.repo_archive(1, \"a5c805f456f46b44e270f342330b06e06c53cbcc\")\nif file.is_a?(Gitlab::FileResponse)\n  puts file.filename # => \"test-HEAD-a5c805f456f46b44e270f342330b06e06c53cbcc.tar.gz\"\n  File.open(file.filename, \"w\") do |f|\n    while byte = r.data.read_byte\n      f.write_byte byte\n    end\n  end\nend\n```","summary":"<p>Get an archive of the repository.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"\"HEAD\"","external_name":"sha","restriction":""}],"args_string":"(project_id : Int32, sha = <span class=\"s\">&quot;HEAD&quot;</span>) : Gitlab::FileResponse | JSON::Any","source_link":null,"def":{"name":"repo_archive","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"sha","doc":null,"default_value":"\"HEAD\"","external_name":"sha","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Gitlab::FileResponse | JSON::Any","visibility":"Public","body":"mime_type = \"application/octet-stream\"\nresponse = get(\"projects/#{project_id}/repository/archive\", params: {\"sha\" => sha}, headers: {\"Accept\" => mime_type})\nif response.headers[\"Content-Type\"] == mime_type\n  Gitlab::FileResponse.new(IO::Memory.new(response.parse), response.headers)\nelse\n  JSON.parse(response.parse)\nend\n"}},{"id":"tree(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"tree(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"tree","doc":"Get a list of repository files and directories in a project.\n\n- param  [Int32] project The ID of a project.\n- param  [Hash] params A customizable set of params.\n- option params [String] :path The path inside repository. Used to get contend of subdirectories.\n- option params [String] :ref The name of a repository branch or tag or if not given the default branch\n- return [JSON::Any]\n\n```\nclient.tree(42)\nclient.tree(42, { \"path\" => \"shard.yml\" })\n```","summary":"<p>Get a list of repository files and directories in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"tree","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/tree\", params: params)).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/RepositoryFile","path":"Gitlab/Client/RepositoryFile.html","kind":"module","full_name":"Gitlab::Client::RepositoryFile","name":"RepositoryFile","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to repository.\n\nSee [https://docs.gitlab.com/ce/api/repository_files.html](https://docs.gitlab.com/ce/api/repository_files.html)","summary":"<p>Defines methods related to repository.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"file_contents(project_id:Int32,filepath:String,sha=&quot;HEAD&quot;):String-instance-method","html_id":"file_contents(project_id:Int32,filepath:String,sha=&quot;HEAD&quot;):String-instance-method","name":"file_contents","doc":"Get the raw file contents for a file by commit SHA and path.\n\n- param  [Int32] project The ID of a project.\n- param  [String] filepath The path and name of a file.\n- param  [String] sha The id of a commit sha.\n- return [String] The raw file contents\n\n```\nclient.file_contents(1, \"README.md\")\nclient.file_contents(1, \"src/gitlab.cr\", \"a5c805f456f46b44e270f342330b06e06c53cbcc\")\n```","summary":"<p>Get the raw file contents for a file by commit SHA and path.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"filepath","doc":null,"default_value":"","external_name":"filepath","restriction":"String"},{"name":"sha","doc":null,"default_value":"\"HEAD\"","external_name":"sha","restriction":""}],"args_string":"(project_id : Int32, filepath : String, sha = <span class=\"s\">&quot;HEAD&quot;</span>) : String","source_link":null,"def":{"name":"file_contents","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"filepath","doc":null,"default_value":"","external_name":"filepath","restriction":"String"},{"name":"sha","doc":null,"default_value":"\"HEAD\"","external_name":"sha","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"begin\n  file_contents_from_files(project_id, filepath, sha)\nrescue\n  file_contents_from_blobs(project_id, filepath, sha)\nend"}},{"id":"get_file(project_id:Int32,filepath:String,ref=&quot;HEAD&quot;)-instance-method","html_id":"get_file(project_id:Int32,filepath:String,ref=&quot;HEAD&quot;)-instance-method","name":"get_file","doc":"Gets a repository file.\n\n- param  [Int32] project The ID or name of a project.\n- param  [String] file_path The full path of the file.\n- param  [String] ref The name of branch, tag or commit.\n- return [JSON::Any]\n\n```\nclient.get_file(42, \"README.md\")\nclient.get_file(42, \"README.md\", \"develop\")\n```","summary":"<p>Gets a repository file.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"filepath","doc":null,"default_value":"","external_name":"filepath","restriction":"String"},{"name":"ref","doc":null,"default_value":"\"HEAD\"","external_name":"ref","restriction":""}],"args_string":"(project_id : Int32, filepath : String, ref = <span class=\"s\">&quot;HEAD&quot;</span>)","source_link":null,"def":{"name":"get_file","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"filepath","doc":null,"default_value":"","external_name":"filepath","restriction":"String"},{"name":"ref","doc":null,"default_value":"\"HEAD\"","external_name":"ref","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/files/#{filepath}\", params: {ref: ref})).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Session","path":"Gitlab/Client/Session.html","kind":"module","full_name":"Gitlab::Client::Session","name":"Session","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to session.\n\nSee [http://docs.gitlab.com/ce/api/session.html](http://docs.gitlab.com/ce/api/session.html)","summary":"<p>Defines methods related to session.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"session(login:String,password:String):JSON::Any-instance-method","html_id":"session(login:String,password:String):JSON::Any-instance-method","name":"session","doc":"Creates a new user session.\n\n- param  [String] login The email or username of a user.\n- param  [String] password The password of a user.\n- return [JSON::Any] Information about logged in user.\n\n```\nclient.session(\"jack@example.com\", \"secret12345\")\nclient.session(\"jack\", \"secret12345\")\n```","summary":"<p>Creates a new user session.</p>","abstract":false,"args":[{"name":"login","doc":null,"default_value":"","external_name":"login","restriction":"String"},{"name":"password","doc":null,"default_value":"","external_name":"password","restriction":"String"}],"args_string":"(login : String, password : String) : JSON::Any","source_link":null,"def":{"name":"session","args":[{"name":"login","doc":null,"default_value":"","external_name":"login","restriction":"String"},{"name":"password","doc":null,"default_value":"","external_name":"password","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"session\", form: {\"email\" => login, \"password\" => password})).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Tag","path":"Gitlab/Client/Tag.html","kind":"module","full_name":"Gitlab::Client::Tag","name":"Tag","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to tag.\n\nSee [http://docs.gitlab.com/ce/api/tags.html](http://docs.gitlab.com/ce/api/tags.html)","summary":"<p>Defines methods related to tag.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"create_release_notes(project_id:Int32,tag:String,description:String):JSON::Any-instance-method","html_id":"create_release_notes(project_id:Int32,tag:String,description:String):JSON::Any-instance-method","name":"create_release_notes","doc":"Create release notes in a project.\n\n- param  [Int32] project The ID of a project.\n- param  [String] tag The name of a tag.\n- param  [String] description Release notes with markdown support.\n- return [JSON::Any] Information about the created release notes in a project.\n\n```\nclient.create_release_notes(1, \"1.0.0\", \"Release v1.0.0\")\n```","summary":"<p>Create release notes in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"String"}],"args_string":"(project_id : Int32, tag : String, description : String) : JSON::Any","source_link":null,"def":{"name":"create_release_notes","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/repository/tags/#{tag}/release\", form: {\"description\" => description})).parse"}},{"id":"create_tag(project_id:Int32,tag:String,ref:String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"create_tag(project_id:Int32,tag:String,ref:String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"create_tag","doc":"Create a tag in a project.\n\n- param  [Int32] project The ID of a project.\n- param  [String] tag The name of a tag.\n- param  [String] ref Create tag using commit SHA, another tag name, or branch name.\n- param  [String] form A customizable set of the params.\n- option form  [String] :message Creates annotated tag.\n- option  form [String] :release_description Add release notes to the git tag and store it in the GitLab database.\n- return [JSON::Any] Information about the created tag in a project.\n\n```\nclient.create_tag(1, \"1.0.0\", \"master\")\nclient.create_tag(1, \"1.0.1\", \"1.0.0\", {\"message\" => \"message in tag\", \"release_description\" => \"message in gitlab\"})\n```","summary":"<p>Create a tag in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"ref","doc":null,"default_value":"","external_name":"ref","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(project_id : Int32, tag : String, ref : String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"create_tag","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"ref","doc":null,"default_value":"","external_name":"ref","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"projects/#{project_id}/repository/tags\", form: {\"tag_name\" => tag, \"ref\" => ref}.merge(form))).parse"}},{"id":"delete_tag(project_id:Int32,tag:String):JSON::Any-instance-method","html_id":"delete_tag(project_id:Int32,tag:String):JSON::Any-instance-method","name":"delete_tag","doc":"Delete a tag.\n\n- param  [Int32] project_id The ID of a project.\n- param  [String] tag The name of a tag.\n- return [JSON::Any] Information about the deleted tag.\n\n```\nclient.delete_tag(42)\n```","summary":"<p>Delete a tag.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"}],"args_string":"(project_id : Int32, tag : String) : JSON::Any","source_link":null,"def":{"name":"delete_tag","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"projects/#{project_id}/repository/tag/#{tag}\")).parse"}},{"id":"tag(project_id:Int32,tag:String):JSON::Any-instance-method","html_id":"tag(project_id:Int32,tag:String):JSON::Any-instance-method","name":"tag","doc":"Get single tag in a project.\n\n- param  [Int32] project The ID of a project.\n- param  [String] tag The name of a tag.\n- return [JSON::Any] Information about the tag in a project.\n\n```\nclient.tag(1, \"master\")\n```","summary":"<p>Get single tag in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"}],"args_string":"(project_id : Int32, tag : String) : JSON::Any","source_link":null,"def":{"name":"tag","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/tags/#{tag}\")).parse"}},{"id":"tags(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","html_id":"tags(project_id:Int32,params:Hash?=nil):JSON::Any-instance-method","name":"tags","doc":"Gets a list of tags in a project.\n\n- param  [Int32] project The ID of a project.\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page. default is 20\n- return [JSON::Any] List of tags under a project.\n\n```\nclient.tags(1)\nclient.tags(1, {\"per_page\" => \"10\"})\n```","summary":"<p>Gets a list of tags in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(project_id : Int32, params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"tags","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"projects/#{project_id}/repository/tags\", params: params)).parse"}},{"id":"update_release_notes(project_id:Int32,tag:String,description:String):JSON::Any-instance-method","html_id":"update_release_notes(project_id:Int32,tag:String,description:String):JSON::Any-instance-method","name":"update_release_notes","doc":"Update release notes in a project.\n\n- param  [Int32] project The ID of a project.\n- param  [String] tag The name of a tag.\n- param  [String] description Release notes with markdown support.\n- return [JSON::Any] Information about the updated release notes in a project.\n\n```\nclient.update_release_notes(1, \"1.0.0\", \"# Release v1.0.0\\n## xxx\\n## xxx\")\n```","summary":"<p>Update release notes in a project.</p>","abstract":false,"args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"String"}],"args_string":"(project_id : Int32, tag : String, description : String) : JSON::Any","source_link":null,"def":{"name":"update_release_notes","args":[{"name":"project_id","doc":null,"default_value":"","external_name":"project_id","restriction":"Int32"},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"projects/#{project_id}/repository/tags/#{tag}/release\", form: {\"description\" => description})).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/User","path":"Gitlab/Client/User.html","kind":"module","full_name":"Gitlab::Client::User","name":"User","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to users.\n\nSee [http://docs.gitlab.com/ce/api/users.html](http://docs.gitlab.com/ce/api/users.html)","summary":"<p>Defines methods related to users.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"add_email(email):JSON::Any-instance-method","html_id":"add_email(email):JSON::Any-instance-method","name":"add_email","doc":"Creates a new email for current user.\n\n- params  [String] email Email address\n- return [JSON::Any]\n\n```\nclient.add_email('email@example.com')\n```","summary":"<p>Creates a new email for current user.</p>","abstract":false,"args":[{"name":"email","doc":null,"default_value":"","external_name":"email","restriction":""}],"args_string":"(email) : JSON::Any","source_link":null,"def":{"name":"add_email","args":[{"name":"email","doc":null,"default_value":"","external_name":"email","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"user/emails\", form: {\"email\" => email})).parse"}},{"id":"add_email(user_id:Int32,email):JSON::Any-instance-method","html_id":"add_email(user_id:Int32,email):JSON::Any-instance-method","name":"add_email","doc":"Creates a new email for a user.\n\n- params  [Int32] user_id The ID of a user.\n- params  [String] email Email address\n- return [JSON::Any]\n\n```\nclient.add_email('email@example.com', 2)\n```","summary":"<p>Creates a new email for a user.</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"email","doc":null,"default_value":"","external_name":"email","restriction":""}],"args_string":"(user_id : Int32, email) : JSON::Any","source_link":null,"def":{"name":"add_email","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"email","doc":null,"default_value":"","external_name":"email","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"users/#{user_id.to_s}/emails\", form: {\"email\" => email})).parse"}},{"id":"block_user(user_id:Int32):JSON::Any-instance-method","html_id":"block_user(user_id:Int32):JSON::Any-instance-method","name":"block_user","doc":"Blocks the specified user.\n\n**Available only for admin**.\n\n- param [Int32] user_id The Id of user\n- return [JSON::Any] success or not\n\n```\nclient.block_user(4)\n```","summary":"<p>Blocks the specified user.</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"block_user","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"users/#{user_id.to_s}/block\")).parse"}},{"id":"create_ssh_key(title,key):JSON::Any-instance-method","html_id":"create_ssh_key(title,key):JSON::Any-instance-method","name":"create_ssh_key","doc":"Creates a new SSH key for current user.\n\n- param  [String] title The title of an SSH key.\n- param  [String] key The SSH key body.\n- return [JSON::Any] Information about created SSH key.\n\n```\nclient.create_ssh_key(\"key title\", \"key body\")\n```","summary":"<p>Creates a new SSH key for current user.</p>","abstract":false,"args":[{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":""},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"args_string":"(title, key) : JSON::Any","source_link":null,"def":{"name":"create_ssh_key","args":[{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":""},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"user/keys\", form: {\"title\" => title, \"key\" => key})).parse"}},{"id":"create_ssh_key(user_id,title,key):JSON::Any-instance-method","html_id":"create_ssh_key(user_id,title,key):JSON::Any-instance-method","name":"create_ssh_key","doc":"Creates a new SSH key for a user.\n\n- param  [Int32] user_id The Id of user.\n- param  [String] key The SSH key body.\n- return [JSON::Any] Information about created SSH key.\n\n```\nclient.create_ssh_key(2, \"key title\", \"key body\")\n```","summary":"<p>Creates a new SSH key for a user.</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":""},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":""},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"args_string":"(user_id, title, key) : JSON::Any","source_link":null,"def":{"name":"create_ssh_key","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":""},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":""},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"users/#{user_id.to_s}/keys\", form: {\"title\" => title, \"key\" => key})).parse"}},{"id":"create_user(email:String,password:String,username:String,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"create_user(email:String,password:String,username:String,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"create_user","doc":"Creates a new user.\nRequires authentication from an admin account.\n\n- param  [String] email The email of a user.\n- param  [String] password The password of a user.\n- param  [String] username The username of a user.\n- param  [Hash] form A customizable set of form.\n- option form [String] :name The name of a user. Defaults to email.\n- option form [String] :skype The skype of a user.\n- option form [String] :linkedin The linkedin of a user.\n- option form [String] :twitter The twitter of a user.\n- option form [Int32] :projects_limit The limit of projects for a user.\n- return [JSON::Any] Information about created user.\n\n```\nGitlab.create_user(\"icy.leaf@kaifeng.cn\", \"secret\", \"icyleaf\", {\"name\" => \"三火\"})\nGitlab.create_user(\"icy.leaf@kaifeng.cn\", \"secret\", \"icyleaf\")\n```","summary":"<p>Creates a new user.</p>","abstract":false,"args":[{"name":"email","doc":null,"default_value":"","external_name":"email","restriction":"String"},{"name":"password","doc":null,"default_value":"","external_name":"password","restriction":"String"},{"name":"username","doc":null,"default_value":"","external_name":"username","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(email : String, password : String, username : String, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"create_user","args":[{"name":"email","doc":null,"default_value":"","external_name":"email","restriction":"String"},{"name":"password","doc":null,"default_value":"","external_name":"password","restriction":"String"},{"name":"username","doc":null,"default_value":"","external_name":"username","restriction":"String"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(post(\"users\", form: {\"email\" => email, \"password\" => password, \"username\" => username, \"name\" => username}.merge(form))).parse"}},{"id":"delete_email(email_id:Int32):JSON::Any-instance-method","html_id":"delete_email(email_id:Int32):JSON::Any-instance-method","name":"delete_email","doc":"Delete email for current user\n\n- params  [Int32] email_id Email address ID\n- return [JSON::Any]\n\n```\nclient.delete_email(2)\n```","summary":"<p>Delete email for current user</p>","abstract":false,"args":[{"name":"email_id","doc":null,"default_value":"","external_name":"email_id","restriction":"Int32"}],"args_string":"(email_id : Int32) : JSON::Any","source_link":null,"def":{"name":"delete_email","args":[{"name":"email_id","doc":null,"default_value":"","external_name":"email_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"user/emails/#{email_id.to_s}\")).parse"}},{"id":"delete_email(email_id:Int32,user_id:Int32):JSON::Any-instance-method","html_id":"delete_email(email_id:Int32,user_id:Int32):JSON::Any-instance-method","name":"delete_email","doc":"Delete email for current user\n\n- params  [Int32] user_id The ID of a user.\n- params  [Int32] email_id Email address ID\n- return [JSON::Any]\n\n```\nclient.delete_email(1, 2)\n```","summary":"<p>Delete email for current user</p>","abstract":false,"args":[{"name":"email_id","doc":null,"default_value":"","external_name":"email_id","restriction":"Int32"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(email_id : Int32, user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"delete_email","args":[{"name":"email_id","doc":null,"default_value":"","external_name":"email_id","restriction":"Int32"},{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"users/#{user_id.to_s}/emails/#{email_id.to_s}\")).parse"}},{"id":"delete_ssh_key(ssh_key_id:Int32):JSON::Any-instance-method","html_id":"delete_ssh_key(ssh_key_id:Int32):JSON::Any-instance-method","name":"delete_ssh_key","doc":"Deletes an SSH key for current user.\n\n- param  [Int32] ssh_key_id The ID of a user\"s SSH key.\n- return [JSON::Any] Information about deleted SSH key.\n\n```\nclient.delete_ssh_key(1)\n```","summary":"<p>Deletes an SSH key for current user.</p>","abstract":false,"args":[{"name":"ssh_key_id","doc":null,"default_value":"","external_name":"ssh_key_id","restriction":"Int32"}],"args_string":"(ssh_key_id : Int32) : JSON::Any","source_link":null,"def":{"name":"delete_ssh_key","args":[{"name":"ssh_key_id","doc":null,"default_value":"","external_name":"ssh_key_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"user/keys/#{ssh_key_id.to_s}\")).parse"}},{"id":"delete_ssh_key(user_id:Int32,ssh_key_id:Int32):JSON::Any-instance-method","html_id":"delete_ssh_key(user_id:Int32,ssh_key_id:Int32):JSON::Any-instance-method","name":"delete_ssh_key","doc":"Deletes an SSH key for a user.\n\n- param  [Int32] user_id The Id of user.\n- param  [Int32] ssh_key_id The ID of a user\"s SSH key.\n- return [JSON::Any] Information about deleted SSH key.\n\n```\nclient.delete_ssh_key(1, 1)\n```","summary":"<p>Deletes an SSH key for a user.</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"ssh_key_id","doc":null,"default_value":"","external_name":"ssh_key_id","restriction":"Int32"}],"args_string":"(user_id : Int32, ssh_key_id : Int32) : JSON::Any","source_link":null,"def":{"name":"delete_ssh_key","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"ssh_key_id","doc":null,"default_value":"","external_name":"ssh_key_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"users/#{user_id.to_s}/keys/#{ssh_key_id.to_s}\")).parse"}},{"id":"delete_user(user_id:Int32):JSON::Any-instance-method","html_id":"delete_user(user_id:Int32):JSON::Any-instance-method","name":"delete_user","doc":"Deletes a user.\n\n- param [Int32] user_id The ID of a user.\n- return [JSON::Any] Information about deleted user.\n\n```\nclient.delete_user(1)\n```","summary":"<p>Deletes a user.</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"delete_user","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"users/#{user_id.to_s}\")).parse"}},{"id":"edit_user(user_id:Int32,form:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"edit_user(user_id:Int32,form:Hash={}ofString=>String):JSON::Any-instance-method","name":"edit_user","doc":"Updates a user.\n\n- param  [Int32] id The ID of a user.\n- param  [Hash] params A customizable set of params.\n- option params [String] :email The email of a user.\n- option params [String] :password The password of a user.\n- option params [String] :name The name of a user. Defaults to email.\n- option params [String] :skype The skype of a user.\n- option params [String] :linkedin The linkedin of a user.\n- option params [String] :twitter The twitter of a user.\n- option params [String] :projects_limit The limit of projects for a user.\n- return [JSON::Any] Information about edit user.\n\n```\nclient.edit_user(4, {\"email\" => \"icy.leaf@kaifeng.cn\", \"projects_limit\" => \"100\"})\n```","summary":"<p>Updates a user.</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"args_string":"(user_id : Int32, form : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"edit_user","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"form","doc":null,"default_value":"{} of String => String","external_name":"form","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"users/#{user_id.to_s}\", form: form)).parse"}},{"id":"email(email_id:Int32):JSON::Any-instance-method","html_id":"email(email_id:Int32):JSON::Any-instance-method","name":"email","doc":"Get a single email.\n\n- param  [Int32] email_id The ID of a email.\n- return [JSON::Any]\n\n```\nclient.email(3)\n```","summary":"<p>Get a single email.</p>","abstract":false,"args":[{"name":"email_id","doc":null,"default_value":"","external_name":"email_id","restriction":"Int32"}],"args_string":"(email_id : Int32) : JSON::Any","source_link":null,"def":{"name":"email","args":[{"name":"email_id","doc":null,"default_value":"","external_name":"email_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"user/emails/#{email_id.to_s}\")).parse"}},{"id":"emails:JSON::Any-instance-method","html_id":"emails:JSON::Any-instance-method","name":"emails","doc":"Gets current user emails.\n\n- return [JSON::Any]\n\n```\nclient.emails\n```","summary":"<p>Gets current user emails.</p>","abstract":false,"args":[],"args_string":" : JSON::Any","source_link":null,"def":{"name":"emails","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"user/emails\")).parse"}},{"id":"emails(user_id:Int32):JSON::Any-instance-method","html_id":"emails(user_id:Int32):JSON::Any-instance-method","name":"emails","doc":"Gets a user emails.\n\n- param  [Int32] user_id The ID of a user.\n- return [JSON::Any]\n\n```\nclient.emails(2)\n```","summary":"<p>Gets a user emails.</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"emails","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"users/#{user_id.to_s}/emails\")).parse"}},{"id":"ssh_key(ssh_key_id:Int32):JSON::Any-instance-method","html_id":"ssh_key(ssh_key_id:Int32):JSON::Any-instance-method","name":"ssh_key","doc":"Gets information about SSH key.\n\n- param  [Int32] ssh_key_id The ID of a user\"s SSH key.\n- return [JSON::Any]\n\n```\nclient.ssh_key(1)\n```","summary":"<p>Gets information about SSH key.</p>","abstract":false,"args":[{"name":"ssh_key_id","doc":null,"default_value":"","external_name":"ssh_key_id","restriction":"Int32"}],"args_string":"(ssh_key_id : Int32) : JSON::Any","source_link":null,"def":{"name":"ssh_key","args":[{"name":"ssh_key_id","doc":null,"default_value":"","external_name":"ssh_key_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"user/keys/#{ssh_key_id.to_s}\")).parse"}},{"id":"ssh_keys:JSON::Any-instance-method","html_id":"ssh_keys:JSON::Any-instance-method","name":"ssh_keys","doc":"Gets a list of current user\"s SSH keys.\n\n- return [JSON::Any]\n\n```\nclient.ssh_keys\n```","summary":"<p>Gets a list of current user\"s SSH keys.</p>","abstract":false,"args":[],"args_string":" : JSON::Any","source_link":null,"def":{"name":"ssh_keys","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"user/keys\")).parse"}},{"id":"ssh_keys(user_id:Int32):JSON::Any-instance-method","html_id":"ssh_keys(user_id:Int32):JSON::Any-instance-method","name":"ssh_keys","doc":"Gets a list of a user\"s SSH keys.\n\n- param  [Int32] user_id The Id of user.\n- return [JSON::Any]\n\n```\nclient.ssh_keys(4)\n```","summary":"<p>Gets a list of a user\"s SSH keys.</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"ssh_keys","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"users/#{user_id.to_s}/keys\")).parse"}},{"id":"unblock_user(user_id:Int32):JSON::Any-instance-method","html_id":"unblock_user(user_id:Int32):JSON::Any-instance-method","name":"unblock_user","doc":"Unblocks the specified user.\n\n**Available only for admin**.\n\n- param [Int32] user_id The Id of user\n- return [JSON::Any] success or not\n\n```\nclient.unblock_user(4)\n```","summary":"<p>Unblocks the specified user.</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"unblock_user","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"users/#{user_id.to_s}/unblock\")).parse"}},{"id":"user:JSON::Any-instance-method","html_id":"user:JSON::Any-instance-method","name":"user","doc":"Gets information about current user.\n\n- return [JSON::Any]\n\n```\nclient.user\n```","summary":"<p>Gets information about current user.</p>","abstract":false,"args":[],"args_string":" : JSON::Any","source_link":null,"def":{"name":"user","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"user\")).parse"}},{"id":"user(user_id:Int32):JSON::Any-instance-method","html_id":"user(user_id:Int32):JSON::Any-instance-method","name":"user","doc":"Gets information about a user.\n\n- param  [Int32] user_id The ID of a user.\n- return [JSON::Any]\n\n```\nclient.user(2)\n```","summary":"<p>Gets information about a user.</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"user","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"users/#{user_id.to_s}\")).parse"}},{"id":"user_add_custom_attribute(user_id:Int32,key:String,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"user_add_custom_attribute(user_id:Int32,key:String,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"user_add_custom_attribute","doc":"Add's a user custom attribute\n\n**Available only for admin**.\n\n- param [Int32] user_id The Id of user\n- param [String] the key of the custom attribute\n- param  [Hash] params A single param with the value of the custom attribute\n- params [String] :value The value of the custom attribute.\n- return [JSON::Any] information about the custom_attribute\n\n```\nclient.user_add_custom_attribute(4, custom_key, {\"value\"=> \"custom_value\"})\n```","summary":"<p>Add's a user custom attribute</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(user_id : Int32, key : String, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"user_add_custom_attribute","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(put(\"users/#{user_id.to_s}/custom_attributes/#{key}\", form: params)).parse"}},{"id":"user_custom_attributes(user_id:Int32):JSON::Any-instance-method","html_id":"user_custom_attributes(user_id:Int32):JSON::Any-instance-method","name":"user_custom_attributes","doc":"List user custom attributes\n\n**Available only for admin**.\n\n- param [Int32] user_id The Id of user\n- return [JSON::Any] information about the custom_attribute\n\n```\nclient.user_custom_attributes(4)\n```","summary":"<p>List user custom attributes</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"args_string":"(user_id : Int32) : JSON::Any","source_link":null,"def":{"name":"user_custom_attributes","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"users/#{user_id.to_s}/custom_attributes\")).parse"}},{"id":"user_delete_custom_attribute(user_id:Int32,key:String):JSON::Any-instance-method","html_id":"user_delete_custom_attribute(user_id:Int32,key:String):JSON::Any-instance-method","name":"user_delete_custom_attribute","doc":"Deletes a user custom attribute\n\n**Available only for admin**.\n\n- param [Int32] user_id The Id of user\n- param [String] the key of the custom attribute\n- return [JSON::Any] information about the custom_attribute\n\n```\nclient.user_delete_custom_attribute(4, custom_key)\n```","summary":"<p>Deletes a user custom attribute</p>","abstract":false,"args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(user_id : Int32, key : String) : JSON::Any","source_link":null,"def":{"name":"user_delete_custom_attribute","args":[{"name":"user_id","doc":null,"default_value":"","external_name":"user_id","restriction":"Int32"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(delete(\"users/#{user_id.to_s}/custom_attributes/#{key}\")).parse"}},{"id":"user_search(query,params:Hash={}ofString=>String):JSON::Any-instance-method","html_id":"user_search(query,params:Hash={}ofString=>String):JSON::Any-instance-method","name":"user_search","doc":"Search for user by name\n\n- param  [String] query A string to search for in group names and paths.\n- param  [Hash] params A customizable set of params.\n- option params [String] :per_page Number of projects to return per page\n- option params [String] :page The page to retrieve\n- return [JSON::Any] List of projects under search qyery\n\n```\nclient.group_search(\"icyleaf\")\nclient.group_search(\"icyleaf\", {\"per_page\" => 50})\n```","summary":"<p>Search for user by name</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"args_string":"(query, params : Hash = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>) : JSON::Any","source_link":null,"def":{"name":"user_search","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"users\", params: {\"search\" => query}.merge(params))).parse"}},{"id":"users(params:Hash?=nil):JSON::Any-instance-method","html_id":"users(params:Hash?=nil):JSON::Any-instance-method","name":"users","doc":"Gets a list of users.\n\n- param  [Hash] params A customizable set of params.\n- option params [String] :page The page number.\n- option params [String] :per_page The number of results per page.\n- return [JSON::Any]\n\n```\nclient.users\nclient.users({\"per_page\" => \"10\", \"page\" => \"2\"})\n```","summary":"<p>Gets a list of users.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"args_string":"(params : Hash? = <span class=\"n\">nil</span>) : JSON::Any","source_link":null,"def":{"name":"users","args":[{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"JSON::Any","visibility":"Public","body":"(get(\"users\", params: params)).parse"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Client/Version","path":"Gitlab/Client/Version.html","kind":"module","full_name":"Gitlab::Client::Version","name":"Version","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"}],"namespace":{"html_id":"gitlab/Gitlab/Client","kind":"class","full_name":"Gitlab::Client","name":"Client"},"doc":"Defines methods related to version\n\nSee [https://docs.gitlab.com/ce/api/version.html](https://docs.gitlab.com/ce/api/version.html)","summary":"<p>Defines methods related to version</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"version-instance-method","html_id":"version-instance-method","name":"version","doc":"Returns server version.\n\n- return [JSON::Any]\n\n```\nclient.version\n```","summary":"<p>Returns server version.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(get(\"version\")).parse"}}],"macros":[],"types":[]}]},{"html_id":"gitlab/Gitlab/Error","path":"Gitlab/Error.html","kind":"module","full_name":"Gitlab::Error","name":"Error","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab","kind":"module","full_name":"Gitlab","name":"Gitlab"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"gitlab/Gitlab/Error/APIError","path":"Gitlab/Error/APIError.html","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"gitlab/Gitlab/Error/BadGateway","kind":"class","full_name":"Gitlab::Error::BadGateway","name":"BadGateway"},{"html_id":"gitlab/Gitlab/Error/BadRequest","kind":"class","full_name":"Gitlab::Error::BadRequest","name":"BadRequest"},{"html_id":"gitlab/Gitlab/Error/Conflict","kind":"class","full_name":"Gitlab::Error::Conflict","name":"Conflict"},{"html_id":"gitlab/Gitlab/Error/Forbidden","kind":"class","full_name":"Gitlab::Error::Forbidden","name":"Forbidden"},{"html_id":"gitlab/Gitlab/Error/InternalServerError","kind":"class","full_name":"Gitlab::Error::InternalServerError","name":"InternalServerError"},{"html_id":"gitlab/Gitlab/Error/MethodNotAllowed","kind":"class","full_name":"Gitlab::Error::MethodNotAllowed","name":"MethodNotAllowed"},{"html_id":"gitlab/Gitlab/Error/NotFound","kind":"class","full_name":"Gitlab::Error::NotFound","name":"NotFound"},{"html_id":"gitlab/Gitlab/Error/ServiceUnavailable","kind":"class","full_name":"Gitlab::Error::ServiceUnavailable","name":"ServiceUnavailable"},{"html_id":"gitlab/Gitlab/Error/Unauthorized","kind":"class","full_name":"Gitlab::Error::Unauthorized","name":"Unauthorized"},{"html_id":"gitlab/Gitlab/Error/Unprocessable","kind":"class","full_name":"Gitlab::Error::Unprocessable","name":"Unprocessable"}],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(response:Halite::Response)-class-method","html_id":"new(response:Halite::Response)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"response","doc":null,"default_value":"","external_name":"response","restriction":"Halite::Response"}],"args_string":"(response : Halite::Response)","source_link":null,"def":{"name":"new","args":[{"name":"response","doc":null,"default_value":"","external_name":"response","restriction":"Halite::Response"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(response)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"response:Halite::Response-instance-method","html_id":"response:Halite::Response-instance-method","name":"response","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Halite::Response","source_link":null,"def":{"name":"response","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@response"}}],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/BadGateway","path":"Gitlab/Error/BadGateway.html","kind":"class","full_name":"Gitlab::Error::BadGateway","name":"BadGateway","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/BadRequest","path":"Gitlab/Error/BadRequest.html","kind":"class","full_name":"Gitlab::Error::BadRequest","name":"BadRequest","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/Conflict","path":"Gitlab/Error/Conflict.html","kind":"class","full_name":"Gitlab::Error::Conflict","name":"Conflict","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/Error","path":"Gitlab/Error/Error.html","kind":"class","full_name":"Gitlab::Error::Error","name":"Error","abstract":false,"superclass":{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},{"html_id":"gitlab/Gitlab/Error/MissingCredentials","kind":"class","full_name":"Gitlab::Error::MissingCredentials","name":"MissingCredentials"},{"html_id":"gitlab/Gitlab/Error/NotAllowRequestMethodError","kind":"class","full_name":"Gitlab::Error::NotAllowRequestMethodError","name":"NotAllowRequestMethodError"},{"html_id":"gitlab/Gitlab/Error/NotExistsFileError","kind":"class","full_name":"Gitlab::Error::NotExistsFileError","name":"NotExistsFileError"},{"html_id":"gitlab/Gitlab/Error/NotMatchTypeError","kind":"class","full_name":"Gitlab::Error::NotMatchTypeError","name":"NotMatchTypeError"}],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/Forbidden","path":"Gitlab/Error/Forbidden.html","kind":"class","full_name":"Gitlab::Error::Forbidden","name":"Forbidden","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/InternalServerError","path":"Gitlab/Error/InternalServerError.html","kind":"class","full_name":"Gitlab::Error::InternalServerError","name":"InternalServerError","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/MethodNotAllowed","path":"Gitlab/Error/MethodNotAllowed.html","kind":"class","full_name":"Gitlab::Error::MethodNotAllowed","name":"MethodNotAllowed","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/MissingCredentials","path":"Gitlab/Error/MissingCredentials.html","kind":"class","full_name":"Gitlab::Error::MissingCredentials","name":"MissingCredentials","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/NoSupportGraphQLAPIError","path":"Gitlab/Error/NoSupportGraphQLAPIError.html","kind":"class","full_name":"Gitlab::Error::NoSupportGraphQLAPIError","name":"NoSupportGraphQLAPIError","abstract":false,"superclass":{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/NotAllowRequestMethodError","path":"Gitlab/Error/NotAllowRequestMethodError.html","kind":"class","full_name":"Gitlab::Error::NotAllowRequestMethodError","name":"NotAllowRequestMethodError","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/NotExistsFileError","path":"Gitlab/Error/NotExistsFileError.html","kind":"class","full_name":"Gitlab::Error::NotExistsFileError","name":"NotExistsFileError","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/NotFound","path":"Gitlab/Error/NotFound.html","kind":"class","full_name":"Gitlab::Error::NotFound","name":"NotFound","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/NotMatchTypeError","path":"Gitlab/Error/NotMatchTypeError.html","kind":"class","full_name":"Gitlab::Error::NotMatchTypeError","name":"NotMatchTypeError","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/ServiceUnavailable","path":"Gitlab/Error/ServiceUnavailable.html","kind":"class","full_name":"Gitlab::Error::ServiceUnavailable","name":"ServiceUnavailable","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/Unauthorized","path":"Gitlab/Error/Unauthorized.html","kind":"class","full_name":"Gitlab::Error::Unauthorized","name":"Unauthorized","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"gitlab/Gitlab/Error/Unprocessable","path":"Gitlab/Error/Unprocessable.html","kind":"class","full_name":"Gitlab::Error::Unprocessable","name":"Unprocessable","abstract":false,"superclass":{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},"ancestors":[{"html_id":"gitlab/Gitlab/Error/APIError","kind":"class","full_name":"Gitlab::Error::APIError","name":"APIError"},{"html_id":"gitlab/Gitlab/Error/Error","kind":"class","full_name":"Gitlab::Error::Error","name":"Error"},{"html_id":"gitlab/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"gitlab/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab/Error","kind":"module","full_name":"Gitlab::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"gitlab/Gitlab/FileResponse","path":"Gitlab/FileResponse.html","kind":"struct","full_name":"Gitlab::FileResponse","name":"FileResponse","abstract":false,"superclass":{"html_id":"gitlab/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"gitlab/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"gitlab/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"gitlab/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"gitlab","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"gitlab/Gitlab","kind":"module","full_name":"Gitlab","name":"Gitlab"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(data:IO,headers:HTTP::Headers)-class-method","html_id":"new(data:IO,headers:HTTP::Headers)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"IO"},{"name":"headers","doc":null,"default_value":"","external_name":"headers","restriction":"HTTP::Headers"}],"args_string":"(data : IO, headers : HTTP::Headers)","source_link":null,"def":{"name":"new","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"IO"},{"name":"headers","doc":null,"default_value":"","external_name":"headers","restriction":"HTTP::Headers"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(data, headers)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"data:IO-instance-method","html_id":"data:IO-instance-method","name":"data","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : IO","source_link":null,"def":{"name":"data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"IO","visibility":"Public","body":"@data"}},{"id":"empty?-instance-method","html_id":"empty?-instance-method","name":"empty?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}},{"id":"filename:String-instance-method","html_id":"filename:String-instance-method","name":"filename","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"filename","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@filename"}},{"id":"to_h-instance-method","html_id":"to_h-instance-method","name":"to_h","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"to_h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{filename: @filename, data: @data}"}}],"macros":[],"types":[]}]}]}}